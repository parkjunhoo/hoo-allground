{"version":3,"file":"tiptap-extension-character-count.umd.js","sources":["../../../node_modules/prosemirror-model/src/diff.js","../../../node_modules/prosemirror-model/src/fragment.js","../../../node_modules/prosemirror-model/src/comparedeep.js","../../../node_modules/prosemirror-model/src/mark.js","../../../node_modules/prosemirror-model/src/replace.js","../../../node_modules/prosemirror-model/src/resolvedpos.js","../../../node_modules/prosemirror-model/src/node.js","../../../node_modules/prosemirror-model/src/content.js","../../../node_modules/prosemirror-model/src/schema.js","../../../node_modules/prosemirror-model/src/from_dom.js","../../../node_modules/prosemirror-model/src/to_dom.js","../../../node_modules/prosemirror-transform/src/map.js","../../../node_modules/prosemirror-transform/src/transform.js","../../../node_modules/prosemirror-transform/src/step.js","../../../node_modules/prosemirror-transform/src/replace_step.js","../../../node_modules/prosemirror-transform/src/structure.js","../../../node_modules/prosemirror-transform/src/mark_step.js","../../../node_modules/prosemirror-transform/src/mark.js","../../../node_modules/prosemirror-transform/src/replace.js","../../../node_modules/prosemirror-state/src/selection.js","../../../node_modules/prosemirror-state/src/transaction.js","../../../node_modules/prosemirror-state/src/state.js","../../../node_modules/prosemirror-state/src/plugin.js","../src/character-count.ts"],"sourcesContent":["export function findDiffStart(a, b, pos) {\n  for (let i = 0;; i++) {\n    if (i == a.childCount || i == b.childCount)\n      return a.childCount == b.childCount ? null : pos\n\n    let childA = a.child(i), childB = b.child(i)\n    if (childA == childB) { pos += childA.nodeSize; continue }\n\n    if (!childA.sameMarkup(childB)) return pos\n\n    if (childA.isText && childA.text != childB.text) {\n      for (let j = 0; childA.text[j] == childB.text[j]; j++)\n        pos++\n      return pos\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffStart(childA.content, childB.content, pos + 1)\n      if (inner != null) return inner\n    }\n    pos += childA.nodeSize\n  }\n}\n\nexport function findDiffEnd(a, b, posA, posB) {\n  for (let iA = a.childCount, iB = b.childCount;;) {\n    if (iA == 0 || iB == 0)\n      return iA == iB ? null : {a: posA, b: posB}\n\n    let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize\n    if (childA == childB) {\n      posA -= size; posB -= size\n      continue\n    }\n\n    if (!childA.sameMarkup(childB)) return {a: posA, b: posB}\n\n    if (childA.isText && childA.text != childB.text) {\n      let same = 0, minSize = Math.min(childA.text.length, childB.text.length)\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n        same++; posA--; posB--\n      }\n      return {a: posA, b: posB}\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1)\n      if (inner) return inner\n    }\n    posA -= size; posB -= size\n  }\n}\n","import {findDiffStart, findDiffEnd} from \"./diff\"\n\n// ::- A fragment represents a node's collection of child nodes.\n//\n// Like nodes, fragments are persistent data structures, and you\n// should not mutate them or their content. Rather, you create new\n// instances whenever needed. The API tries to make this easy.\nexport class Fragment {\n  constructor(content, size) {\n    this.content = content\n    // :: number\n    // The size of the fragment, which is the total of the size of its\n    // content nodes.\n    this.size = size || 0\n    if (size == null) for (let i = 0; i < content.length; i++)\n      this.size += content[i].nodeSize\n  }\n\n  // :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes between the given two\n  // positions (relative to start of this fragment). Doesn't descend\n  // into a node when the callback returns `false`.\n  nodesBetween(from, to, f, nodeStart = 0, parent) {\n    for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {\n        let start = pos + 1\n        child.nodesBetween(Math.max(0, from - start),\n                           Math.min(child.content.size, to - start),\n                           f, nodeStart + start)\n      }\n      pos = end\n    }\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) → ?bool)\n  // Call the given callback for every descendant node. The callback\n  // may return `false` to prevent traversal of a given node's children.\n  descendants(f) {\n    this.nodesBetween(0, this.size, f)\n  }\n\n  // :: (number, number, ?string, ?string) → string\n  // Extract the text between `from` and `to`. See the same method on\n  // [`Node`](#model.Node.textBetween).\n  textBetween(from, to, blockSeparator, leafText) {\n    let text = \"\", separated = true\n    this.nodesBetween(from, to, (node, pos) => {\n      if (node.isText) {\n        text += node.text.slice(Math.max(from, pos) - pos, to - pos)\n        separated = !blockSeparator\n      } else if (node.isLeaf && leafText) {\n        text += leafText\n        separated = !blockSeparator\n      } else if (!separated && node.isBlock) {\n        text += blockSeparator\n        separated = true\n      }\n    }, 0)\n    return text\n  }\n\n  // :: (Fragment) → Fragment\n  // Create a new fragment containing the combined content of this\n  // fragment and the other.\n  append(other) {\n    if (!other.size) return this\n    if (!this.size) return other\n    let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0\n    if (last.isText && last.sameMarkup(first)) {\n      content[content.length - 1] = last.withText(last.text + first.text)\n      i = 1\n    }\n    for (; i < other.content.length; i++) content.push(other.content[i])\n    return new Fragment(content, this.size + other.size)\n  }\n\n  // :: (number, ?number) → Fragment\n  // Cut out the sub-fragment between the two given positions.\n  cut(from, to) {\n    if (to == null) to = this.size\n    if (from == 0 && to == this.size) return this\n    let result = [], size = 0\n    if (to > from) for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from) {\n        if (pos < from || end > to) {\n          if (child.isText)\n            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos))\n          else\n            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1))\n        }\n        result.push(child)\n        size += child.nodeSize\n      }\n      pos = end\n    }\n    return new Fragment(result, size)\n  }\n\n  cutByIndex(from, to) {\n    if (from == to) return Fragment.empty\n    if (from == 0 && to == this.content.length) return this\n    return new Fragment(this.content.slice(from, to))\n  }\n\n  // :: (number, Node) → Fragment\n  // Create a new fragment in which the node at the given index is\n  // replaced by the given node.\n  replaceChild(index, node) {\n    let current = this.content[index]\n    if (current == node) return this\n    let copy = this.content.slice()\n    let size = this.size + node.nodeSize - current.nodeSize\n    copy[index] = node\n    return new Fragment(copy, size)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by prepending the given node to this\n  // fragment.\n  addToStart(node) {\n    return new Fragment([node].concat(this.content), this.size + node.nodeSize)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by appending the given node to this\n  // fragment.\n  addToEnd(node) {\n    return new Fragment(this.content.concat(node), this.size + node.nodeSize)\n  }\n\n  // :: (Fragment) → bool\n  // Compare this fragment to another one.\n  eq(other) {\n    if (this.content.length != other.content.length) return false\n    for (let i = 0; i < this.content.length; i++)\n      if (!this.content[i].eq(other.content[i])) return false\n    return true\n  }\n\n  // :: ?Node\n  // The first child of the fragment, or `null` if it is empty.\n  get firstChild() { return this.content.length ? this.content[0] : null }\n\n  // :: ?Node\n  // The last child of the fragment, or `null` if it is empty.\n  get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null }\n\n  // :: number\n  // The number of child nodes in this fragment.\n  get childCount() { return this.content.length }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raise an error when the\n  // index is out of range.\n  child(index) {\n    let found = this.content[index]\n    if (!found) throw new RangeError(\"Index \" + index + \" out of range for \" + this)\n    return found\n  }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) {\n    return this.content[index]\n  }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) {\n    for (let i = 0, p = 0; i < this.content.length; i++) {\n      let child = this.content[i]\n      f(child, p, i)\n      p += child.nodeSize\n    }\n  }\n\n  // :: (Fragment) → ?number\n  // Find the first position at which this fragment and another\n  // fragment differ, or `null` if they are the same.\n  findDiffStart(other, pos = 0) {\n    return findDiffStart(this, other, pos)\n  }\n\n  // :: (Fragment) → ?{a: number, b: number}\n  // Find the first position, searching from the end, at which this\n  // fragment and the given fragment differ, or `null` if they are the\n  // same. Since this position will not be the same in both nodes, an\n  // object with two separate positions is returned.\n  findDiffEnd(other, pos = this.size, otherPos = other.size) {\n    return findDiffEnd(this, other, pos, otherPos)\n  }\n\n  // : (number, ?number) → {index: number, offset: number}\n  // Find the index and inner offset corresponding to a given relative\n  // position in this fragment. The result object will be reused\n  // (overwritten) the next time the function is called. (Not public.)\n  findIndex(pos, round = -1) {\n    if (pos == 0) return retIndex(0, pos)\n    if (pos == this.size) return retIndex(this.content.length, pos)\n    if (pos > this.size || pos < 0) throw new RangeError(`Position ${pos} outside of fragment (${this})`)\n    for (let i = 0, curPos = 0;; i++) {\n      let cur = this.child(i), end = curPos + cur.nodeSize\n      if (end >= pos) {\n        if (end == pos || round > 0) return retIndex(i + 1, end)\n        return retIndex(i, curPos)\n      }\n      curPos = end\n    }\n  }\n\n  // :: () → string\n  // Return a debugging string that describes this fragment.\n  toString() { return \"<\" + this.toStringInner() + \">\" }\n\n  toStringInner() { return this.content.join(\", \") }\n\n  // :: () → ?Object\n  // Create a JSON-serializeable representation of this fragment.\n  toJSON() {\n    return this.content.length ? this.content.map(n => n.toJSON()) : null\n  }\n\n  // :: (Schema, ?Object) → Fragment\n  // Deserialize a fragment from its JSON representation.\n  static fromJSON(schema, value) {\n    if (!value) return Fragment.empty\n    if (!Array.isArray(value)) throw new RangeError(\"Invalid input for Fragment.fromJSON\")\n    return new Fragment(value.map(schema.nodeFromJSON))\n  }\n\n  // :: ([Node]) → Fragment\n  // Build a fragment from an array of nodes. Ensures that adjacent\n  // text nodes with the same marks are joined together.\n  static fromArray(array) {\n    if (!array.length) return Fragment.empty\n    let joined, size = 0\n    for (let i = 0; i < array.length; i++) {\n      let node = array[i]\n      size += node.nodeSize\n      if (i && node.isText && array[i - 1].sameMarkup(node)) {\n        if (!joined) joined = array.slice(0, i)\n        joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text)\n      } else if (joined) {\n        joined.push(node)\n      }\n    }\n    return new Fragment(joined || array, size)\n  }\n\n  // :: (?union<Fragment, Node, [Node]>) → Fragment\n  // Create a fragment from something that can be interpreted as a set\n  // of nodes. For `null`, it returns the empty fragment. For a\n  // fragment, the fragment itself. For a node or array of nodes, a\n  // fragment containing those nodes.\n  static from(nodes) {\n    if (!nodes) return Fragment.empty\n    if (nodes instanceof Fragment) return nodes\n    if (Array.isArray(nodes)) return this.fromArray(nodes)\n    if (nodes.attrs) return new Fragment([nodes], nodes.nodeSize)\n    throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" +\n                         (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"))\n  }\n}\n\nconst found = {index: 0, offset: 0}\nfunction retIndex(index, offset) {\n  found.index = index\n  found.offset = offset\n  return found\n}\n\n// :: Fragment\n// An empty fragment. Intended to be reused whenever a node doesn't\n// contain anything (rather than allocating a new empty fragment for\n// each leaf node).\nFragment.empty = new Fragment([], 0)\n","export function compareDeep(a, b) {\n  if (a === b) return true\n  if (!(a && typeof a == \"object\") ||\n      !(b && typeof b == \"object\")) return false\n  let array = Array.isArray(a)\n  if (Array.isArray(b) != array) return false\n  if (array) {\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++) if (!compareDeep(a[i], b[i])) return false\n  } else {\n    for (let p in a) if (!(p in b) || !compareDeep(a[p], b[p])) return false\n    for (let p in b) if (!(p in a)) return false\n  }\n  return true\n}\n","import {compareDeep} from \"./comparedeep\"\n\n// ::- A mark is a piece of information that can be attached to a node,\n// such as it being emphasized, in code font, or a link. It has a type\n// and optionally a set of attributes that provide further information\n// (such as the target of the link). Marks are created through a\n// `Schema`, which controls which types exist and which\n// attributes they have.\nexport class Mark {\n  constructor(type, attrs) {\n    // :: MarkType\n    // The type of this mark.\n    this.type = type\n    // :: Object\n    // The attributes associated with this mark.\n    this.attrs = attrs\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Given a set of marks, create a new set which contains this one as\n  // well, in the right position. If this mark is already in the set,\n  // the set itself is returned. If any marks that are set to be\n  // [exclusive](#model.MarkSpec.excludes) with this mark are present,\n  // those are replaced by this one.\n  addToSet(set) {\n    let copy, placed = false\n    for (let i = 0; i < set.length; i++) {\n      let other = set[i]\n      if (this.eq(other)) return set\n      if (this.type.excludes(other.type)) {\n        if (!copy) copy = set.slice(0, i)\n      } else if (other.type.excludes(this.type)) {\n        return set\n      } else {\n        if (!placed && other.type.rank > this.type.rank) {\n          if (!copy) copy = set.slice(0, i)\n          copy.push(this)\n          placed = true\n        }\n        if (copy) copy.push(other)\n      }\n    }\n    if (!copy) copy = set.slice()\n    if (!placed) copy.push(this)\n    return copy\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Remove this mark from the given set, returning a new set. If this\n  // mark is not in the set, the set itself is returned.\n  removeFromSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i]))\n        return set.slice(0, i).concat(set.slice(i + 1))\n    return set\n  }\n\n  // :: ([Mark]) → bool\n  // Test whether this mark is in the given set of marks.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i])) return true\n    return false\n  }\n\n  // :: (Mark) → bool\n  // Test whether this mark has the same type and attributes as\n  // another mark.\n  eq(other) {\n    return this == other ||\n      (this.type == other.type && compareDeep(this.attrs, other.attrs))\n  }\n\n  // :: () → Object\n  // Convert this mark to a JSON-serializeable representation.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    return obj\n  }\n\n  // :: (Schema, Object) → Mark\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Mark.fromJSON\")\n    let type = schema.marks[json.type]\n    if (!type) throw new RangeError(`There is no mark type ${json.type} in this schema`)\n    return type.create(json.attrs)\n  }\n\n  // :: ([Mark], [Mark]) → bool\n  // Test whether two sets of marks are identical.\n  static sameSet(a, b) {\n    if (a == b) return true\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++)\n      if (!a[i].eq(b[i])) return false\n    return true\n  }\n\n  // :: (?union<Mark, [Mark]>) → [Mark]\n  // Create a properly sorted mark set from null, a single mark, or an\n  // unsorted array of marks.\n  static setFrom(marks) {\n    if (!marks || marks.length == 0) return Mark.none\n    if (marks instanceof Mark) return [marks]\n    let copy = marks.slice()\n    copy.sort((a, b) => a.type.rank - b.type.rank)\n    return copy\n  }\n}\n\n// :: [Mark] The empty set of marks.\nMark.none = []\n","import {Fragment} from \"./fragment\"\n\n// ReplaceError:: class extends Error\n// Error type raised by [`Node.replace`](#model.Node.replace) when\n// given an invalid replacement.\n\nexport function ReplaceError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = ReplaceError.prototype\n  return err\n}\n\nReplaceError.prototype = Object.create(Error.prototype)\nReplaceError.prototype.constructor = ReplaceError\nReplaceError.prototype.name = \"ReplaceError\"\n\n// ::- A slice represents a piece cut out of a larger document. It\n// stores not only a fragment, but also the depth up to which nodes on\n// both side are ‘open’ (cut through).\nexport class Slice {\n  // :: (Fragment, number, number)\n  // Create a slice. When specifying a non-zero open depth, you must\n  // make sure that there are nodes of at least that depth at the\n  // appropriate side of the fragment—i.e. if the fragment is an empty\n  // paragraph node, `openStart` and `openEnd` can't be greater than 1.\n  //\n  // It is not necessary for the content of open nodes to conform to\n  // the schema's content constraints, though it should be a valid\n  // start/end/middle for such a node, depending on which sides are\n  // open.\n  constructor(content, openStart, openEnd) {\n    // :: Fragment The slice's content.\n    this.content = content\n    // :: number The open depth at the start.\n    this.openStart = openStart\n    // :: number The open depth at the end.\n    this.openEnd = openEnd\n  }\n\n  // :: number\n  // The size this slice would add when inserted into a document.\n  get size() {\n    return this.content.size - this.openStart - this.openEnd\n  }\n\n  insertAt(pos, fragment) {\n    let content = insertInto(this.content, pos + this.openStart, fragment, null)\n    return content && new Slice(content, this.openStart, this.openEnd)\n  }\n\n  removeBetween(from, to) {\n    return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd)\n  }\n\n  // :: (Slice) → bool\n  // Tests whether this slice is equal to another slice.\n  eq(other) {\n    return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd\n  }\n\n  toString() {\n    return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\"\n  }\n\n  // :: () → ?Object\n  // Convert a slice to a JSON-serializable representation.\n  toJSON() {\n    if (!this.content.size) return null\n    let json = {content: this.content.toJSON()}\n    if (this.openStart > 0) json.openStart = this.openStart\n    if (this.openEnd > 0) json.openEnd = this.openEnd\n    return json\n  }\n\n  // :: (Schema, ?Object) → Slice\n  // Deserialize a slice from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) return Slice.empty\n    let openStart = json.openStart || 0, openEnd = json.openEnd || 0\n    if (typeof openStart != \"number\" || typeof openEnd != \"number\")\n      throw new RangeError(\"Invalid input for Slice.fromJSON\")\n    return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd)\n  }\n\n  // :: (Fragment, ?bool) → Slice\n  // Create a slice from a fragment by taking the maximum possible\n  // open value on both side of the fragment.\n  static maxOpen(fragment, openIsolating=true) {\n    let openStart = 0, openEnd = 0\n    for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) openStart++\n    for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild) openEnd++\n    return new Slice(fragment, openStart, openEnd)\n  }\n}\n\nfunction removeRange(content, from, to) {\n  let {index, offset} = content.findIndex(from), child = content.maybeChild(index)\n  let {index: indexTo, offset: offsetTo} = content.findIndex(to)\n  if (offset == from || child.isText) {\n    if (offsetTo != to && !content.child(indexTo).isText) throw new RangeError(\"Removing non-flat range\")\n    return content.cut(0, from).append(content.cut(to))\n  }\n  if (index != indexTo) throw new RangeError(\"Removing non-flat range\")\n  return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)))\n}\n\nfunction insertInto(content, dist, insert, parent) {\n  let {index, offset} = content.findIndex(dist), child = content.maybeChild(index)\n  if (offset == dist || child.isText) {\n    if (parent && !parent.canReplace(index, index, insert)) return null\n    return content.cut(0, dist).append(insert).append(content.cut(dist))\n  }\n  let inner = insertInto(child.content, dist - offset - 1, insert)\n  return inner && content.replaceChild(index, child.copy(inner))\n}\n\n// :: Slice\n// The empty slice.\nSlice.empty = new Slice(Fragment.empty, 0, 0)\n\nexport function replace($from, $to, slice) {\n  if (slice.openStart > $from.depth)\n    throw new ReplaceError(\"Inserted content deeper than insertion position\")\n  if ($from.depth - slice.openStart != $to.depth - slice.openEnd)\n    throw new ReplaceError(\"Inconsistent open depths\")\n  return replaceOuter($from, $to, slice, 0)\n}\n\nfunction replaceOuter($from, $to, slice, depth) {\n  let index = $from.index(depth), node = $from.node(depth)\n  if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n    let inner = replaceOuter($from, $to, slice, depth + 1)\n    return node.copy(node.content.replaceChild(index, inner))\n  } else if (!slice.content.size) {\n    return close(node, replaceTwoWay($from, $to, depth))\n  } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case\n    let parent = $from.parent, content = parent.content\n    return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)))\n  } else {\n    let {start, end} = prepareSliceForReplace(slice, $from)\n    return close(node, replaceThreeWay($from, start, end, $to, depth))\n  }\n}\n\nfunction checkJoin(main, sub) {\n  if (!sub.type.compatibleContent(main.type))\n    throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name)\n}\n\nfunction joinable($before, $after, depth) {\n  let node = $before.node(depth)\n  checkJoin(node, $after.node(depth))\n  return node\n}\n\nfunction addNode(child, target) {\n  let last = target.length - 1\n  if (last >= 0 && child.isText && child.sameMarkup(target[last]))\n    target[last] = child.withText(target[last].text + child.text)\n  else\n    target.push(child)\n}\n\nfunction addRange($start, $end, depth, target) {\n  let node = ($end || $start).node(depth)\n  let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount\n  if ($start) {\n    startIndex = $start.index(depth)\n    if ($start.depth > depth) {\n      startIndex++\n    } else if ($start.textOffset) {\n      addNode($start.nodeAfter, target)\n      startIndex++\n    }\n  }\n  for (let i = startIndex; i < endIndex; i++) addNode(node.child(i), target)\n  if ($end && $end.depth == depth && $end.textOffset)\n    addNode($end.nodeBefore, target)\n}\n\nfunction close(node, content) {\n  if (!node.type.validContent(content))\n    throw new ReplaceError(\"Invalid content for node \" + node.type.name)\n  return node.copy(content)\n}\n\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n  let openStart = $from.depth > depth && joinable($from, $start, depth + 1)\n  let openEnd = $to.depth > depth && joinable($end, $to, depth + 1)\n\n  let content = []\n  addRange(null, $from, depth, content)\n  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n    checkJoin(openStart, openEnd)\n    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content)\n  } else {\n    if (openStart)\n      addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content)\n    addRange($start, $end, depth, content)\n    if (openEnd)\n      addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction replaceTwoWay($from, $to, depth) {\n  let content = []\n  addRange(null, $from, depth, content)\n  if ($from.depth > depth) {\n    let type = joinable($from, $to, depth + 1)\n    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction prepareSliceForReplace(slice, $along) {\n  let extra = $along.depth - slice.openStart, parent = $along.node(extra)\n  let node = parent.copy(slice.content)\n  for (let i = extra - 1; i >= 0; i--)\n    node = $along.node(i).copy(Fragment.from(node))\n  return {start: node.resolveNoCache(slice.openStart + extra),\n          end: node.resolveNoCache(node.content.size - slice.openEnd - extra)}\n}\n","import {Mark} from \"./mark\"\n\n// ::- You can [_resolve_](#model.Node.resolve) a position to get more\n// information about it. Objects of this class represent such a\n// resolved position, providing various pieces of context information,\n// and some helper methods.\n//\n// Throughout this interface, methods that take an optional `depth`\n// parameter will interpret undefined as `this.depth` and negative\n// numbers as `this.depth + value`.\nexport class ResolvedPos {\n  constructor(pos, path, parentOffset) {\n    // :: number The position that was resolved.\n    this.pos = pos\n    this.path = path\n    // :: number\n    // The number of levels the parent node is from the root. If this\n    // position points directly into the root node, it is 0. If it\n    // points into a top-level paragraph, 1, and so on.\n    this.depth = path.length / 3 - 1\n    // :: number The offset this position has into its parent node.\n    this.parentOffset = parentOffset\n  }\n\n  resolveDepth(val) {\n    if (val == null) return this.depth\n    if (val < 0) return this.depth + val\n    return val\n  }\n\n  // :: Node\n  // The parent node that the position points into. Note that even if\n  // a position points into a text node, that node is not considered\n  // the parent—text nodes are ‘flat’ in this model, and have no content.\n  get parent() { return this.node(this.depth) }\n\n  // :: Node\n  // The root node in which the position was resolved.\n  get doc() { return this.node(0) }\n\n  // :: (?number) → Node\n  // The ancestor node at the given level. `p.node(p.depth)` is the\n  // same as `p.parent`.\n  node(depth) { return this.path[this.resolveDepth(depth) * 3] }\n\n  // :: (?number) → number\n  // The index into the ancestor at the given level. If this points at\n  // the 3rd node in the 2nd paragraph on the top level, for example,\n  // `p.index(0)` is 1 and `p.index(1)` is 2.\n  index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1] }\n\n  // :: (?number) → number\n  // The index pointing after this position into the ancestor at the\n  // given level.\n  indexAfter(depth) {\n    depth = this.resolveDepth(depth)\n    return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1)\n  }\n\n  // :: (?number) → number\n  // The (absolute) position at the start of the node at the given\n  // level.\n  start(depth) {\n    depth = this.resolveDepth(depth)\n    return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n  }\n\n  // :: (?number) → number\n  // The (absolute) position at the end of the node at the given\n  // level.\n  end(depth) {\n    depth = this.resolveDepth(depth)\n    return this.start(depth) + this.node(depth).content.size\n  }\n\n  // :: (?number) → number\n  // The (absolute) position directly before the wrapping node at the\n  // given level, or, when `depth` is `this.depth + 1`, the original\n  // position.\n  before(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position before the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1]\n  }\n\n  // :: (?number) → number\n  // The (absolute) position directly after the wrapping node at the\n  // given level, or the original position when `depth` is `this.depth + 1`.\n  after(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position after the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize\n  }\n\n  // :: number\n  // When this position points into a text node, this returns the\n  // distance between the position and the start of the text node.\n  // Will be zero for positions that point between nodes.\n  get textOffset() { return this.pos - this.path[this.path.length - 1] }\n\n  // :: ?Node\n  // Get the node directly after the position, if any. If the position\n  // points into a text node, only the part of that node after the\n  // position is returned.\n  get nodeAfter() {\n    let parent = this.parent, index = this.index(this.depth)\n    if (index == parent.childCount) return null\n    let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index)\n    return dOff ? parent.child(index).cut(dOff) : child\n  }\n\n  // :: ?Node\n  // Get the node directly before the position, if any. If the\n  // position points into a text node, only the part of that node\n  // before the position is returned.\n  get nodeBefore() {\n    let index = this.index(this.depth)\n    let dOff = this.pos - this.path[this.path.length - 1]\n    if (dOff) return this.parent.child(index).cut(0, dOff)\n    return index == 0 ? null : this.parent.child(index - 1)\n  }\n\n  // :: (number, ?number) → number\n  // Get the position at the given index in the parent node at the\n  // given depth (which defaults to `this.depth`).\n  posAtIndex(index, depth) {\n    depth = this.resolveDepth(depth)\n    let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n    for (let i = 0; i < index; i++) pos += node.child(i).nodeSize\n    return pos\n  }\n\n  // :: () → [Mark]\n  // Get the marks at this position, factoring in the surrounding\n  // marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the\n  // position is at the start of a non-empty node, the marks of the\n  // node after it (if any) are returned.\n  marks() {\n    let parent = this.parent, index = this.index()\n\n    // In an empty parent, return the empty array\n    if (parent.content.size == 0) return Mark.none\n\n    // When inside a text node, just return the text node's marks\n    if (this.textOffset) return parent.child(index).marks\n\n    let main = parent.maybeChild(index - 1), other = parent.maybeChild(index)\n    // If the `after` flag is true of there is no node before, make\n    // the node after this position the main reference.\n    if (!main) { let tmp = main; main = other; other = tmp }\n\n    // Use all marks in the main node, except those that have\n    // `inclusive` set to false and are not present in the other node.\n    let marks = main.marks\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))\n        marks = marks[i--].removeFromSet(marks)\n\n    return marks\n  }\n\n  // :: (ResolvedPos) → ?[Mark]\n  // Get the marks after the current position, if any, except those\n  // that are non-inclusive and not present at position `$end`. This\n  // is mostly useful for getting the set of marks to preserve after a\n  // deletion. Will return `null` if this position is at the end of\n  // its parent node or its parent node isn't a textblock (in which\n  // case no marks should be preserved).\n  marksAcross($end) {\n    let after = this.parent.maybeChild(this.index())\n    if (!after || !after.isInline) return null\n\n    let marks = after.marks, next = $end.parent.maybeChild($end.index())\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))\n        marks = marks[i--].removeFromSet(marks)\n    return marks\n  }\n\n  // :: (number) → number\n  // The depth up to which this position and the given (non-resolved)\n  // position share the same parent nodes.\n  sharedDepth(pos) {\n    for (let depth = this.depth; depth > 0; depth--)\n      if (this.start(depth) <= pos && this.end(depth) >= pos) return depth\n    return 0\n  }\n\n  // :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange\n  // Returns a range based on the place where this position and the\n  // given position diverge around block content. If both point into\n  // the same textblock, for example, a range around that textblock\n  // will be returned. If they point into different blocks, the range\n  // around those blocks in their shared ancestor is returned. You can\n  // pass in an optional predicate that will be called with a parent\n  // node to see if a range into that parent is acceptable.\n  blockRange(other = this, pred) {\n    if (other.pos < this.pos) return other.blockRange(this)\n    for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)\n      if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))\n        return new NodeRange(this, other, d)\n  }\n\n  // :: (ResolvedPos) → bool\n  // Query whether the given position shares the same parent node.\n  sameParent(other) {\n    return this.pos - this.parentOffset == other.pos - other.parentOffset\n  }\n\n  // :: (ResolvedPos) → ResolvedPos\n  // Return the greater of this and the given position.\n  max(other) {\n    return other.pos > this.pos ? other : this\n  }\n\n  // :: (ResolvedPos) → ResolvedPos\n  // Return the smaller of this and the given position.\n  min(other) {\n    return other.pos < this.pos ? other : this\n  }\n\n  toString() {\n    let str = \"\"\n    for (let i = 1; i <= this.depth; i++)\n      str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1)\n    return str + \":\" + this.parentOffset\n  }\n\n  static resolve(doc, pos) {\n    if (!(pos >= 0 && pos <= doc.content.size)) throw new RangeError(\"Position \" + pos + \" out of range\")\n    let path = []\n    let start = 0, parentOffset = pos\n    for (let node = doc;;) {\n      let {index, offset} = node.content.findIndex(parentOffset)\n      let rem = parentOffset - offset\n      path.push(node, index, start + offset)\n      if (!rem) break\n      node = node.child(index)\n      if (node.isText) break\n      parentOffset = rem - 1\n      start += offset + 1\n    }\n    return new ResolvedPos(pos, path, parentOffset)\n  }\n\n  static resolveCached(doc, pos) {\n    for (let i = 0; i < resolveCache.length; i++) {\n      let cached = resolveCache[i]\n      if (cached.pos == pos && cached.doc == doc) return cached\n    }\n    let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos)\n    resolveCachePos = (resolveCachePos + 1) % resolveCacheSize\n    return result\n  }\n}\n\nlet resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12\n\n// ::- Represents a flat range of content, i.e. one that starts and\n// ends in the same node.\nexport class NodeRange {\n  // :: (ResolvedPos, ResolvedPos, number)\n  // Construct a node range. `$from` and `$to` should point into the\n  // same node until at least the given `depth`, since a node range\n  // denotes an adjacent set of nodes in a single parent node.\n  constructor($from, $to, depth) {\n    // :: ResolvedPos A resolved position along the start of the\n    // content. May have a `depth` greater than this object's `depth`\n    // property, since these are the positions that were used to\n    // compute the range, not re-resolved positions directly at its\n    // boundaries.\n    this.$from = $from\n    // :: ResolvedPos A position along the end of the content. See\n    // caveat for [`$from`](#model.NodeRange.$from).\n    this.$to = $to\n    // :: number The depth of the node that this range points into.\n    this.depth = depth\n  }\n\n  // :: number The position at the start of the range.\n  get start() { return this.$from.before(this.depth + 1) }\n  // :: number The position at the end of the range.\n  get end() { return this.$to.after(this.depth + 1) }\n\n  // :: Node The parent node that the range points into.\n  get parent() { return this.$from.node(this.depth) }\n  // :: number The start index of the range in the parent node.\n  get startIndex() { return this.$from.index(this.depth) }\n  // :: number The end index of the range in the parent node.\n  get endIndex() { return this.$to.indexAfter(this.depth) }\n}\n","import {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {Slice, replace} from \"./replace\"\nimport {ResolvedPos} from \"./resolvedpos\"\nimport {compareDeep} from \"./comparedeep\"\n\nconst emptyAttrs = Object.create(null)\n\n// ::- This class represents a node in the tree that makes up a\n// ProseMirror document. So a document is an instance of `Node`, with\n// children that are also instances of `Node`.\n//\n// Nodes are persistent data structures. Instead of changing them, you\n// create new ones with the content you want. Old ones keep pointing\n// at the old document shape. This is made cheaper by sharing\n// structure between the old and new data as much as possible, which a\n// tree shape like this (without back pointers) makes easy.\n//\n// **Do not** directly mutate the properties of a `Node` object. See\n// [the guide](/docs/guide/#doc) for more information.\nexport class Node {\n  constructor(type, attrs, content, marks) {\n    // :: NodeType\n    // The type of node that this is.\n    this.type = type\n\n    // :: Object\n    // An object mapping attribute names to values. The kind of\n    // attributes allowed and required are\n    // [determined](#model.NodeSpec.attrs) by the node type.\n    this.attrs = attrs\n\n    // :: Fragment\n    // A container holding the node's children.\n    this.content = content || Fragment.empty\n\n    // :: [Mark]\n    // The marks (things like whether it is emphasized or part of a\n    // link) applied to this node.\n    this.marks = marks || Mark.none\n  }\n\n  // text:: ?string\n  // For text nodes, this contains the node's text content.\n\n  // :: number\n  // The size of this node, as defined by the integer-based [indexing\n  // scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n  // amount of characters. For other leaf nodes, it is one. For\n  // non-leaf nodes, it is the size of the content plus two (the start\n  // and end token).\n  get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size }\n\n  // :: number\n  // The number of children that the node has.\n  get childCount() { return this.content.childCount }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raises an error when the\n  // index is out of range.\n  child(index) { return this.content.child(index) }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) { return this.content.maybeChild(index) }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) { this.content.forEach(f) }\n\n  // :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes recursively between\n  // the given two positions that are relative to start of this node's\n  // content. The callback is invoked with the node, its\n  // parent-relative position, its parent node, and its child index.\n  // When the callback returns false for a given node, that node's\n  // children will not be recursed over. The last parameter can be\n  // used to specify a starting position to count from.\n  nodesBetween(from, to, f, startPos = 0) {\n    this.content.nodesBetween(from, to, f, startPos, this)\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) → ?bool)\n  // Call the given callback for every descendant node. Doesn't\n  // descend into a node when the callback returns `false`.\n  descendants(f) {\n    this.nodesBetween(0, this.content.size, f)\n  }\n\n  // :: string\n  // Concatenates all the text nodes found in this fragment and its\n  // children.\n  get textContent() { return this.textBetween(0, this.content.size, \"\") }\n\n  // :: (number, number, ?string, ?string) → string\n  // Get all text between positions `from` and `to`. When\n  // `blockSeparator` is given, it will be inserted whenever a new\n  // block node is started. When `leafText` is given, it'll be\n  // inserted for every non-text leaf node encountered.\n  textBetween(from, to, blockSeparator, leafText) {\n    return this.content.textBetween(from, to, blockSeparator, leafText)\n  }\n\n  // :: ?Node\n  // Returns this node's first child, or `null` if there are no\n  // children.\n  get firstChild() { return this.content.firstChild }\n\n  // :: ?Node\n  // Returns this node's last child, or `null` if there are no\n  // children.\n  get lastChild() { return this.content.lastChild }\n\n  // :: (Node) → bool\n  // Test whether two nodes represent the same piece of document.\n  eq(other) {\n    return this == other || (this.sameMarkup(other) && this.content.eq(other.content))\n  }\n\n  // :: (Node) → bool\n  // Compare the markup (type, attributes, and marks) of this node to\n  // those of another. Returns `true` if both have the same markup.\n  sameMarkup(other) {\n    return this.hasMarkup(other.type, other.attrs, other.marks)\n  }\n\n  // :: (NodeType, ?Object, ?[Mark]) → bool\n  // Check whether this node's markup correspond to the given type,\n  // attributes, and marks.\n  hasMarkup(type, attrs, marks) {\n    return this.type == type &&\n      compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\n      Mark.sameSet(this.marks, marks || Mark.none)\n  }\n\n  // :: (?Fragment) → Node\n  // Create a new node with the same markup as this node, containing\n  // the given content (or empty, if no content is given).\n  copy(content = null) {\n    if (content == this.content) return this\n    return new this.constructor(this.type, this.attrs, content, this.marks)\n  }\n\n  // :: ([Mark]) → Node\n  // Create a copy of this node, with the given set of marks instead\n  // of the node's own marks.\n  mark(marks) {\n    return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks)\n  }\n\n  // :: (number, ?number) → Node\n  // Create a copy of this node with only the content between the\n  // given positions. If `to` is not given, it defaults to the end of\n  // the node.\n  cut(from, to) {\n    if (from == 0 && to == this.content.size) return this\n    return this.copy(this.content.cut(from, to))\n  }\n\n  // :: (number, ?number) → Slice\n  // Cut out the part of the document between the given positions, and\n  // return it as a `Slice` object.\n  slice(from, to = this.content.size, includeParents = false) {\n    if (from == to) return Slice.empty\n\n    let $from = this.resolve(from), $to = this.resolve(to)\n    let depth = includeParents ? 0 : $from.sharedDepth(to)\n    let start = $from.start(depth), node = $from.node(depth)\n    let content = node.content.cut($from.pos - start, $to.pos - start)\n    return new Slice(content, $from.depth - depth, $to.depth - depth)\n  }\n\n  // :: (number, number, Slice) → Node\n  // Replace the part of the document between the given positions with\n  // the given slice. The slice must 'fit', meaning its open sides\n  // must be able to connect to the surrounding content, and its\n  // content nodes must be valid children for the node they are placed\n  // into. If any of this is violated, an error of type\n  // [`ReplaceError`](#model.ReplaceError) is thrown.\n  replace(from, to, slice) {\n    return replace(this.resolve(from), this.resolve(to), slice)\n  }\n\n  // :: (number) → ?Node\n  // Find the node directly after the given position.\n  nodeAt(pos) {\n    for (let node = this;;) {\n      let {index, offset} = node.content.findIndex(pos)\n      node = node.maybeChild(index)\n      if (!node) return null\n      if (offset == pos || node.isText) return node\n      pos -= offset + 1\n    }\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node after the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childAfter(pos) {\n    let {index, offset} = this.content.findIndex(pos)\n    return {node: this.content.maybeChild(index), index, offset}\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node before the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childBefore(pos) {\n    if (pos == 0) return {node: null, index: 0, offset: 0}\n    let {index, offset} = this.content.findIndex(pos)\n    if (offset < pos) return {node: this.content.child(index), index, offset}\n    let node = this.content.child(index - 1)\n    return {node, index: index - 1, offset: offset - node.nodeSize}\n  }\n\n  // :: (number) → ResolvedPos\n  // Resolve the given position in the document, returning an\n  // [object](#model.ResolvedPos) with information about its context.\n  resolve(pos) { return ResolvedPos.resolveCached(this, pos) }\n\n  resolveNoCache(pos) { return ResolvedPos.resolve(this, pos) }\n\n  // :: (number, number, union<Mark, MarkType>) → bool\n  // Test whether a given mark or mark type occurs in this document\n  // between the two given positions.\n  rangeHasMark(from, to, type) {\n    let found = false\n    if (to > from) this.nodesBetween(from, to, node => {\n      if (type.isInSet(node.marks)) found = true\n      return !found\n    })\n    return found\n  }\n\n  // :: bool\n  // True when this is a block (non-inline node)\n  get isBlock() { return this.type.isBlock }\n\n  // :: bool\n  // True when this is a textblock node, a block node with inline\n  // content.\n  get isTextblock() { return this.type.isTextblock }\n\n  // :: bool\n  // True when this node allows inline content.\n  get inlineContent() { return this.type.inlineContent }\n\n  // :: bool\n  // True when this is an inline node (a text node or a node that can\n  // appear among text).\n  get isInline() { return this.type.isInline }\n\n  // :: bool\n  // True when this is a text node.\n  get isText() { return this.type.isText }\n\n  // :: bool\n  // True when this is a leaf node.\n  get isLeaf() { return this.type.isLeaf }\n\n  // :: bool\n  // True when this is an atom, i.e. when it does not have directly\n  // editable content. This is usually the same as `isLeaf`, but can\n  // be configured with the [`atom` property](#model.NodeSpec.atom) on\n  // a node's spec (typically used when the node is displayed as an\n  // uneditable [node view](#view.NodeView)).\n  get isAtom() { return this.type.isAtom }\n\n  // :: () → string\n  // Return a string representation of this node for debugging\n  // purposes.\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    let name = this.type.name\n    if (this.content.size)\n      name += \"(\" + this.content.toStringInner() + \")\"\n    return wrapMarks(this.marks, name)\n  }\n\n  // :: (number) → ContentMatch\n  // Get the content match in this node at the given index.\n  contentMatchAt(index) {\n    let match = this.type.contentMatch.matchFragment(this.content, 0, index)\n    if (!match) throw new Error(\"Called contentMatchAt on a node with invalid content\")\n    return match\n  }\n\n  // :: (number, number, ?Fragment, ?number, ?number) → bool\n  // Test whether replacing the range between `from` and `to` (by\n  // child index) with the given replacement fragment (which defaults\n  // to the empty fragment) would leave the node's content valid. You\n  // can optionally pass `start` and `end` indices into the\n  // replacement fragment.\n  canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {\n    let one = this.contentMatchAt(from).matchFragment(replacement, start, end)\n    let two = one && one.matchFragment(this.content, to)\n    if (!two || !two.validEnd) return false\n    for (let i = start; i < end; i++) if (!this.type.allowsMarks(replacement.child(i).marks)) return false\n    return true\n  }\n\n  // :: (number, number, NodeType, ?[Mark]) → bool\n  // Test whether replacing the range `from` to `to` (by index) with a\n  // node of the given type would leave the node's content valid.\n  canReplaceWith(from, to, type, marks) {\n    if (marks && !this.type.allowsMarks(marks)) return false\n    let start = this.contentMatchAt(from).matchType(type)\n    let end = start && start.matchFragment(this.content, to)\n    return end ? end.validEnd : false\n  }\n\n  // :: (Node) → bool\n  // Test whether the given node's content could be appended to this\n  // node. If that node is empty, this will only return true if there\n  // is at least one node type that can appear in both nodes (to avoid\n  // merging completely incompatible nodes).\n  canAppend(other) {\n    if (other.content.size) return this.canReplace(this.childCount, this.childCount, other.content)\n    else return this.type.compatibleContent(other.type)\n  }\n\n  // :: ()\n  // Check whether this node and its descendants conform to the\n  // schema, and raise error when they do not.\n  check() {\n    if (!this.type.validContent(this.content))\n      throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0, 50)}`)\n    let copy = Mark.none\n    for (let i = 0; i < this.marks.length; i++) copy = this.marks[i].addToSet(copy)\n    if (!Mark.sameSet(copy, this.marks))\n      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`)\n    this.content.forEach(node => node.check())\n  }\n\n  // :: () → Object\n  // Return a JSON-serializeable representation of this node.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    if (this.content.size)\n      obj.content = this.content.toJSON()\n    if (this.marks.length)\n      obj.marks = this.marks.map(n => n.toJSON())\n    return obj\n  }\n\n  // :: (Schema, Object) → Node\n  // Deserialize a node from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Node.fromJSON\")\n    let marks = null\n    if (json.marks) {\n      if (!Array.isArray(json.marks)) throw new RangeError(\"Invalid mark data for Node.fromJSON\")\n      marks = json.marks.map(schema.markFromJSON)\n    }\n    if (json.type == \"text\") {\n      if (typeof json.text != \"string\") throw new RangeError(\"Invalid text node in JSON\")\n      return schema.text(json.text, marks)\n    }\n    let content = Fragment.fromJSON(schema, json.content)\n    return schema.nodeType(json.type).create(json.attrs, content, marks)\n  }\n}\n\nexport class TextNode extends Node {\n  constructor(type, attrs, content, marks) {\n    super(type, attrs, null, marks)\n\n    if (!content) throw new RangeError(\"Empty text nodes are not allowed\")\n\n    this.text = content\n  }\n\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    return wrapMarks(this.marks, JSON.stringify(this.text))\n  }\n\n  get textContent() { return this.text }\n\n  textBetween(from, to) { return this.text.slice(from, to) }\n\n  get nodeSize() { return this.text.length }\n\n  mark(marks) {\n    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks)\n  }\n\n  withText(text) {\n    if (text == this.text) return this\n    return new TextNode(this.type, this.attrs, text, this.marks)\n  }\n\n  cut(from = 0, to = this.text.length) {\n    if (from == 0 && to == this.text.length) return this\n    return this.withText(this.text.slice(from, to))\n  }\n\n  eq(other) {\n    return this.sameMarkup(other) && this.text == other.text\n  }\n\n  toJSON() {\n    let base = super.toJSON()\n    base.text = this.text\n    return base\n  }\n}\n\nfunction wrapMarks(marks, str) {\n  for (let i = marks.length - 1; i >= 0; i--)\n    str = marks[i].type.name + \"(\" + str + \")\"\n  return str\n}\n","import {Fragment} from \"./fragment\"\n\n// ::- Instances of this class represent a match state of a node\n// type's [content expression](#model.NodeSpec.content), and can be\n// used to find out whether further content matches here, and whether\n// a given position is a valid end of the node.\nexport class ContentMatch {\n  constructor(validEnd) {\n    // :: bool\n    // True when this match state represents a valid end of the node.\n    this.validEnd = validEnd\n    this.next = []\n    this.wrapCache = []\n  }\n\n  static parse(string, nodeTypes) {\n    let stream = new TokenStream(string, nodeTypes)\n    if (stream.next == null) return ContentMatch.empty\n    let expr = parseExpr(stream)\n    if (stream.next) stream.err(\"Unexpected trailing text\")\n    let match = dfa(nfa(expr))\n    checkForDeadEnds(match, stream)\n    return match\n  }\n\n  // :: (NodeType) → ?ContentMatch\n  // Match a node type, returning a match after that node if\n  // successful.\n  matchType(type) {\n    for (let i = 0; i < this.next.length; i += 2)\n      if (this.next[i] == type) return this.next[i + 1]\n    return null\n  }\n\n  // :: (Fragment, ?number, ?number) → ?ContentMatch\n  // Try to match a fragment. Returns the resulting match when\n  // successful.\n  matchFragment(frag, start = 0, end = frag.childCount) {\n    let cur = this\n    for (let i = start; cur && i < end; i++)\n      cur = cur.matchType(frag.child(i).type)\n    return cur\n  }\n\n  get inlineContent() {\n    let first = this.next[0]\n    return first ? first.isInline : false\n  }\n\n  // :: ?NodeType\n  // Get the first matching node type at this match position that can\n  // be generated.\n  get defaultType() {\n    for (let i = 0; i < this.next.length; i += 2) {\n      let type = this.next[i]\n      if (!(type.isText || type.hasRequiredAttrs())) return type\n    }\n  }\n\n  compatible(other) {\n    for (let i = 0; i < this.next.length; i += 2)\n      for (let j = 0; j < other.next.length; j += 2)\n        if (this.next[i] == other.next[j]) return true\n    return false\n  }\n\n  // :: (Fragment, bool, ?number) → ?Fragment\n  // Try to match the given fragment, and if that fails, see if it can\n  // be made to match by inserting nodes in front of it. When\n  // successful, return a fragment of inserted nodes (which may be\n  // empty if nothing had to be inserted). When `toEnd` is true, only\n  // return a fragment if the resulting match goes to the end of the\n  // content expression.\n  fillBefore(after, toEnd = false, startIndex = 0) {\n    let seen = [this]\n    function search(match, types) {\n      let finished = match.matchFragment(after, startIndex)\n      if (finished && (!toEnd || finished.validEnd))\n        return Fragment.from(types.map(tp => tp.createAndFill()))\n\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i], next = match.next[i + 1]\n        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n          seen.push(next)\n          let found = search(next, types.concat(type))\n          if (found) return found\n        }\n      }\n    }\n\n    return search(this, [])\n  }\n\n  // :: (NodeType) → ?[NodeType]\n  // Find a set of wrapping node types that would allow a node of the\n  // given type to appear at this position. The result may be empty\n  // (when it fits directly) and will be null when no such wrapping\n  // exists.\n  findWrapping(target) {\n    for (let i = 0; i < this.wrapCache.length; i += 2)\n      if (this.wrapCache[i] == target) return this.wrapCache[i + 1]\n    let computed = this.computeWrapping(target)\n    this.wrapCache.push(target, computed)\n    return computed\n  }\n\n  computeWrapping(target) {\n    let seen = Object.create(null), active = [{match: this, type: null, via: null}]\n    while (active.length) {\n      let current = active.shift(), match = current.match\n      if (match.matchType(target)) {\n        let result = []\n        for (let obj = current; obj.type; obj = obj.via)\n          result.push(obj.type)\n        return result.reverse()\n      }\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i]\n        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {\n          active.push({match: type.contentMatch, type, via: current})\n          seen[type.name] = true\n        }\n      }\n    }\n  }\n\n  // :: number\n  // The number of outgoing edges this node has in the finite\n  // automaton that describes the content expression.\n  get edgeCount() {\n    return this.next.length >> 1\n  }\n\n  // :: (number) → {type: NodeType, next: ContentMatch}\n  // Get the _n_​th outgoing edge from this node in the finite\n  // automaton that describes the content expression.\n  edge(n) {\n    let i = n << 1\n    if (i >= this.next.length) throw new RangeError(`There's no ${n}th edge in this content match`)\n    return {type: this.next[i], next: this.next[i + 1]}\n  }\n\n  toString() {\n    let seen = []\n    function scan(m) {\n      seen.push(m)\n      for (let i = 1; i < m.next.length; i += 2)\n        if (seen.indexOf(m.next[i]) == -1) scan(m.next[i])\n    }\n    scan(this)\n    return seen.map((m, i) => {\n      let out = i + (m.validEnd ? \"*\" : \" \") + \" \"\n      for (let i = 0; i < m.next.length; i += 2)\n        out += (i ? \", \" : \"\") + m.next[i].name + \"->\" + seen.indexOf(m.next[i + 1])\n      return out\n    }).join(\"\\n\")\n  }\n}\n\nContentMatch.empty = new ContentMatch(true)\n\nclass TokenStream {\n  constructor(string, nodeTypes) {\n    this.string = string\n    this.nodeTypes = nodeTypes\n    this.inline = null\n    this.pos = 0\n    this.tokens = string.split(/\\s*(?=\\b|\\W|$)/)\n    if (this.tokens[this.tokens.length - 1] == \"\") this.tokens.pop()\n    if (this.tokens[0] == \"\") this.tokens.shift()\n  }\n\n  get next() { return this.tokens[this.pos] }\n\n  eat(tok) { return this.next == tok && (this.pos++ || true) }\n\n  err(str) { throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\") }\n}\n\nfunction parseExpr(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSeq(stream)) }\n  while (stream.eat(\"|\"))\n  return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n}\n\nfunction parseExprSeq(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSubscript(stream)) }\n  while (stream.next && stream.next != \")\" && stream.next != \"|\")\n  return exprs.length == 1 ? exprs[0] : {type: \"seq\", exprs}\n}\n\nfunction parseExprSubscript(stream) {\n  let expr = parseExprAtom(stream)\n  for (;;) {\n    if (stream.eat(\"+\"))\n      expr = {type: \"plus\", expr}\n    else if (stream.eat(\"*\"))\n      expr = {type: \"star\", expr}\n    else if (stream.eat(\"?\"))\n      expr = {type: \"opt\", expr}\n    else if (stream.eat(\"{\"))\n      expr = parseExprRange(stream, expr)\n    else break\n  }\n  return expr\n}\n\nfunction parseNum(stream) {\n  if (/\\D/.test(stream.next)) stream.err(\"Expected number, got '\" + stream.next + \"'\")\n  let result = Number(stream.next)\n  stream.pos++\n  return result\n}\n\nfunction parseExprRange(stream, expr) {\n  let min = parseNum(stream), max = min\n  if (stream.eat(\",\")) {\n    if (stream.next != \"}\") max = parseNum(stream)\n    else max = -1\n  }\n  if (!stream.eat(\"}\")) stream.err(\"Unclosed braced range\")\n  return {type: \"range\", min, max, expr}\n}\n\nfunction resolveName(stream, name) {\n  let types = stream.nodeTypes, type = types[name]\n  if (type) return [type]\n  let result = []\n  for (let typeName in types) {\n    let type = types[typeName]\n    if (type.groups.indexOf(name) > -1) result.push(type)\n  }\n  if (result.length == 0) stream.err(\"No node type or group '\" + name + \"' found\")\n  return result\n}\n\nfunction parseExprAtom(stream) {\n  if (stream.eat(\"(\")) {\n    let expr = parseExpr(stream)\n    if (!stream.eat(\")\")) stream.err(\"Missing closing paren\")\n    return expr\n  } else if (!/\\W/.test(stream.next)) {\n    let exprs = resolveName(stream, stream.next).map(type => {\n      if (stream.inline == null) stream.inline = type.isInline\n      else if (stream.inline != type.isInline) stream.err(\"Mixing inline and block content\")\n      return {type: \"name\", value: type}\n    })\n    stream.pos++\n    return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n  } else {\n    stream.err(\"Unexpected token '\" + stream.next + \"'\")\n  }\n}\n\n// The code below helps compile a regular-expression-like language\n// into a deterministic finite automaton. For a good introduction to\n// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html\n\n// : (Object) → [[{term: ?any, to: number}]]\n// Construct an NFA from an expression as returned by the parser. The\n// NFA is represented as an array of states, which are themselves\n// arrays of edges, which are `{term, to}` objects. The first state is\n// the entry state and the last node is the success state.\n//\n// Note that unlike typical NFAs, the edge ordering in this one is\n// significant, in that it is used to contruct filler content when\n// necessary.\nfunction nfa(expr) {\n  let nfa = [[]]\n  connect(compile(expr, 0), node())\n  return nfa\n\n  function node() { return nfa.push([]) - 1 }\n  function edge(from, to, term) {\n    let edge = {term, to}\n    nfa[from].push(edge)\n    return edge\n  }\n  function connect(edges, to) { edges.forEach(edge => edge.to = to) }\n\n  function compile(expr, from) {\n    if (expr.type == \"choice\") {\n      return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), [])\n    } else if (expr.type == \"seq\") {\n      for (let i = 0;; i++) {\n        let next = compile(expr.exprs[i], from)\n        if (i == expr.exprs.length - 1) return next\n        connect(next, from = node())\n      }\n    } else if (expr.type == \"star\") {\n      let loop = node()\n      edge(from, loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"plus\") {\n      let loop = node()\n      connect(compile(expr.expr, from), loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"opt\") {\n      return [edge(from)].concat(compile(expr.expr, from))\n    } else if (expr.type == \"range\") {\n      let cur = from\n      for (let i = 0; i < expr.min; i++) {\n        let next = node()\n        connect(compile(expr.expr, cur), next)\n        cur = next\n      }\n      if (expr.max == -1) {\n        connect(compile(expr.expr, cur), cur)\n      } else {\n        for (let i = expr.min; i < expr.max; i++) {\n          let next = node()\n          edge(cur, next)\n          connect(compile(expr.expr, cur), next)\n          cur = next\n        }\n      }\n      return [edge(cur)]\n    } else if (expr.type == \"name\") {\n      return [edge(from, null, expr.value)]\n    }\n  }\n}\n\nfunction cmp(a, b) { return b - a }\n\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n  let result = []\n  scan(node)\n  return result.sort(cmp)\n\n  function scan(node) {\n    let edges = nfa[node]\n    if (edges.length == 1 && !edges[0].term) return scan(edges[0].to)\n    result.push(node)\n    for (let i = 0; i < edges.length; i++) {\n      let {term, to} = edges[i]\n      if (!term && result.indexOf(to) == -1) scan(to)\n    }\n  }\n}\n\n// : ([[{term: ?any, to: number}]]) → ContentMatch\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n  let labeled = Object.create(null)\n  return explore(nullFrom(nfa, 0))\n\n  function explore(states) {\n    let out = []\n    states.forEach(node => {\n      nfa[node].forEach(({term, to}) => {\n        if (!term) return\n        let known = out.indexOf(term), set = known > -1 && out[known + 1]\n        nullFrom(nfa, to).forEach(node => {\n          if (!set) out.push(term, set = [])\n          if (set.indexOf(node) == -1) set.push(node)\n        })\n      })\n    })\n    let state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1)\n    for (let i = 0; i < out.length; i += 2) {\n      let states = out[i + 1].sort(cmp)\n      state.next.push(out[i], labeled[states.join(\",\")] || explore(states))\n    }\n    return state\n  }\n}\n\nfunction checkForDeadEnds(match, stream) {\n  for (let i = 0, work = [match]; i < work.length; i++) {\n    let state = work[i], dead = !state.validEnd, nodes = []\n    for (let j = 0; j < state.next.length; j += 2) {\n      let node = state.next[j], next = state.next[j + 1]\n      nodes.push(node.name)\n      if (dead && !(node.isText || node.hasRequiredAttrs())) dead = false\n      if (work.indexOf(next) == -1) work.push(next)\n    }\n    if (dead) stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position (see https://prosemirror.net/docs/guide/#generatable)\")\n  }\n}\n","import OrderedMap from \"orderedmap\"\n\nimport {Node, TextNode} from \"./node\"\nimport {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {ContentMatch} from \"./content\"\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n  let defaults = Object.create(null)\n  for (let attrName in attrs) {\n    let attr = attrs[attrName]\n    if (!attr.hasDefault) return null\n    defaults[attrName] = attr.default\n  }\n  return defaults\n}\n\nfunction computeAttrs(attrs, value) {\n  let built = Object.create(null)\n  for (let name in attrs) {\n    let given = value && value[name]\n    if (given === undefined) {\n      let attr = attrs[name]\n      if (attr.hasDefault) given = attr.default\n      else throw new RangeError(\"No value supplied for attribute \" + name)\n    }\n    built[name] = given\n  }\n  return built\n}\n\nfunction initAttrs(attrs) {\n  let result = Object.create(null)\n  if (attrs) for (let name in attrs) result[name] = new Attribute(attrs[name])\n  return result\n}\n\n// ::- Node types are objects allocated once per `Schema` and used to\n// [tag](#model.Node.type) `Node` instances. They contain information\n// about the node type, such as its name and what kind of node it\n// represents.\nexport class NodeType {\n  constructor(name, schema, spec) {\n    // :: string\n    // The name the node type has in this schema.\n    this.name = name\n\n    // :: Schema\n    // A link back to the `Schema` the node type belongs to.\n    this.schema = schema\n\n    // :: NodeSpec\n    // The spec that this type is based on\n    this.spec = spec\n\n    this.groups = spec.group ? spec.group.split(\" \") : []\n    this.attrs = initAttrs(spec.attrs)\n\n    this.defaultAttrs = defaultAttrs(this.attrs)\n\n    // :: ContentMatch\n    // The starting match of the node type's content expression.\n    this.contentMatch = null\n\n    // : ?[MarkType]\n    // The set of marks allowed in this node. `null` means all marks\n    // are allowed.\n    this.markSet = null\n\n    // :: bool\n    // True if this node type has inline content.\n    this.inlineContent = null\n\n    // :: bool\n    // True if this is a block type\n    this.isBlock = !(spec.inline || name == \"text\")\n\n    // :: bool\n    // True if this is the text node type.\n    this.isText = name == \"text\"\n  }\n\n  // :: bool\n  // True if this is an inline type.\n  get isInline() { return !this.isBlock }\n\n  // :: bool\n  // True if this is a textblock type, a block that contains inline\n  // content.\n  get isTextblock() { return this.isBlock && this.inlineContent }\n\n  // :: bool\n  // True for node types that allow no content.\n  get isLeaf() { return this.contentMatch == ContentMatch.empty }\n\n  // :: bool\n  // True when this node is an atom, i.e. when it does not have\n  // directly editable content.\n  get isAtom() { return this.isLeaf || this.spec.atom }\n\n  // :: () → bool\n  // Tells you whether this node type has any required attributes.\n  hasRequiredAttrs() {\n    for (let n in this.attrs) if (this.attrs[n].isRequired) return true\n    return false\n  }\n\n  compatibleContent(other) {\n    return this == other || this.contentMatch.compatible(other.contentMatch)\n  }\n\n  computeAttrs(attrs) {\n    if (!attrs && this.defaultAttrs) return this.defaultAttrs\n    else return computeAttrs(this.attrs, attrs)\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a `Node` of this type. The given attributes are\n  // checked and defaulted (you can pass `null` to use the type's\n  // defaults entirely, if no required attributes exist). `content`\n  // may be a `Fragment`, a node, an array of nodes, or\n  // `null`. Similarly `marks` may be `null` to default to the empty\n  // set of marks.\n  create(attrs, content, marks) {\n    if (this.isText) throw new Error(\"NodeType.create can't construct text nodes\")\n    return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Like [`create`](#model.NodeType.create), but check the given content\n  // against the node type's content restrictions, and throw an error\n  // if it doesn't match.\n  createChecked(attrs, content, marks) {\n    content = Fragment.from(content)\n    if (!this.validContent(content))\n      throw new RangeError(\"Invalid content for node \" + this.name)\n    return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node\n  // Like [`create`](#model.NodeType.create), but see if it is necessary to\n  // add nodes to the start or end of the given fragment to make it\n  // fit the node. If no fitting wrapping can be found, return null.\n  // Note that, due to the fact that required nodes can always be\n  // created, this will always succeed if you pass null or\n  // `Fragment.empty` as content.\n  createAndFill(attrs, content, marks) {\n    attrs = this.computeAttrs(attrs)\n    content = Fragment.from(content)\n    if (content.size) {\n      let before = this.contentMatch.fillBefore(content)\n      if (!before) return null\n      content = before.append(content)\n    }\n    let after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true)\n    if (!after) return null\n    return new Node(this, attrs, content.append(after), Mark.setFrom(marks))\n  }\n\n  // :: (Fragment) → bool\n  // Returns true if the given fragment is valid content for this node\n  // type with the given attributes.\n  validContent(content) {\n    let result = this.contentMatch.matchFragment(content)\n    if (!result || !result.validEnd) return false\n    for (let i = 0; i < content.childCount; i++)\n      if (!this.allowsMarks(content.child(i).marks)) return false\n    return true\n  }\n\n  // :: (MarkType) → bool\n  // Check whether the given mark type is allowed in this node.\n  allowsMarkType(markType) {\n    return this.markSet == null || this.markSet.indexOf(markType) > -1\n  }\n\n  // :: ([Mark]) → bool\n  // Test whether the given set of marks are allowed in this node.\n  allowsMarks(marks) {\n    if (this.markSet == null) return true\n    for (let i = 0; i < marks.length; i++) if (!this.allowsMarkType(marks[i].type)) return false\n    return true\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Removes the marks that are not allowed in this node from the given set.\n  allowedMarks(marks) {\n    if (this.markSet == null) return marks\n    let copy\n    for (let i = 0; i < marks.length; i++) {\n      if (!this.allowsMarkType(marks[i].type)) {\n        if (!copy) copy = marks.slice(0, i)\n      } else if (copy) {\n        copy.push(marks[i])\n      }\n    }\n    return !copy ? marks : copy.length ? copy : Mark.empty\n  }\n\n  static compile(nodes, schema) {\n    let result = Object.create(null)\n    nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec))\n\n    let topType = schema.spec.topNode || \"doc\"\n    if (!result[topType]) throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\")\n    if (!result.text) throw new RangeError(\"Every schema needs a 'text' type\")\n    for (let _ in result.text.attrs) throw new RangeError(\"The text node type should not have attributes\")\n\n    return result\n  }\n}\n\n// Attribute descriptors\n\nclass Attribute {\n  constructor(options) {\n    this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\")\n    this.default = options.default\n  }\n\n  get isRequired() {\n    return !this.hasDefault\n  }\n}\n\n// Marks\n\n// ::- Like nodes, marks (which are associated with nodes to signify\n// things like emphasis or being part of a link) are\n// [tagged](#model.Mark.type) with type objects, which are\n// instantiated once per `Schema`.\nexport class MarkType {\n  constructor(name, rank, schema, spec) {\n    // :: string\n    // The name of the mark type.\n    this.name = name\n\n    // :: Schema\n    // The schema that this mark type instance is part of.\n    this.schema = schema\n\n    // :: MarkSpec\n    // The spec on which the type is based.\n    this.spec = spec\n\n    this.attrs = initAttrs(spec.attrs)\n\n    this.rank = rank\n    this.excluded = null\n    let defaults = defaultAttrs(this.attrs)\n    this.instance = defaults && new Mark(this, defaults)\n  }\n\n  // :: (?Object) → Mark\n  // Create a mark of this type. `attrs` may be `null` or an object\n  // containing only some of the mark's attributes. The others, if\n  // they have defaults, will be added.\n  create(attrs) {\n    if (!attrs && this.instance) return this.instance\n    return new Mark(this, computeAttrs(this.attrs, attrs))\n  }\n\n  static compile(marks, schema) {\n    let result = Object.create(null), rank = 0\n    marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec))\n    return result\n  }\n\n  // :: ([Mark]) → [Mark]\n  // When there is a mark of this type in the given set, a new set\n  // without it is returned. Otherwise, the input set is returned.\n  removeFromSet(set) {\n    for (var i = 0; i < set.length; i++) if (set[i].type == this) {\n      set = set.slice(0, i).concat(set.slice(i + 1))\n      i--\n    }\n    return set\n  }\n\n  // :: ([Mark]) → ?Mark\n  // Tests whether there is a mark of this type in the given set.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (set[i].type == this) return set[i]\n  }\n\n  // :: (MarkType) → bool\n  // Queries whether a given mark type is\n  // [excluded](#model.MarkSpec.excludes) by this one.\n  excludes(other) {\n    return this.excluded.indexOf(other) > -1\n  }\n}\n\n// SchemaSpec:: interface\n// An object describing a schema, as passed to the [`Schema`](#model.Schema)\n// constructor.\n//\n//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>\n//   The node types in this schema. Maps names to\n//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type\n//   associated with that name. Their order is significant—it\n//   determines which [parse rules](#model.NodeSpec.parseDOM) take\n//   precedence by default, and which nodes come first in a given\n//   [group](#model.NodeSpec.group).\n//\n//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>\n//   The mark types that exist in this schema. The order in which they\n//   are provided determines the order in which [mark\n//   sets](#model.Mark.addToSet) are sorted and in which [parse\n//   rules](#model.MarkSpec.parseDOM) are tried.\n//\n//   topNode:: ?string\n//   The name of the default top-level node for the schema. Defaults\n//   to `\"doc\"`.\n\n// NodeSpec:: interface\n//\n//   content:: ?string\n//   The content expression for this node, as described in the [schema\n//   guide](/docs/guide/#schema.content_expressions). When not given,\n//   the node does not allow any content.\n//\n//   marks:: ?string\n//   The marks that are allowed inside of this node. May be a\n//   space-separated string referring to mark names or groups, `\"_\"`\n//   to explicitly allow all marks, or `\"\"` to disallow marks. When\n//   not given, nodes with inline content default to allowing all\n//   marks, other nodes default to not allowing marks.\n//\n//   group:: ?string\n//   The group or space-separated groups to which this node belongs,\n//   which can be referred to in the content expressions for the\n//   schema.\n//\n//   inline:: ?bool\n//   Should be set to true for inline nodes. (Implied for text nodes.)\n//\n//   atom:: ?bool\n//   Can be set to true to indicate that, though this isn't a [leaf\n//   node](#model.NodeType.isLeaf), it doesn't have directly editable\n//   content and should be treated as a single unit in the view.\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that nodes of this type get.\n//\n//   selectable:: ?bool\n//   Controls whether nodes of this type can be selected as a [node\n//   selection](#state.NodeSelection). Defaults to true for non-text\n//   nodes.\n//\n//   draggable:: ?bool\n//   Determines whether nodes of this type can be dragged without\n//   being selected. Defaults to false.\n//\n//   code:: ?bool\n//   Can be used to indicate that this node contains code, which\n//   causes some commands to behave differently.\n//\n//   defining:: ?bool\n//   Determines whether this node is considered an important parent\n//   node during replace operations (such as paste). Non-defining (the\n//   default) nodes get dropped when their entire content is replaced,\n//   whereas defining nodes persist and wrap the inserted content.\n//   Likewise, in _inserted_ content the defining parents of the\n//   content are preserved when possible. Typically,\n//   non-default-paragraph textblock types, and possibly list items,\n//   are marked as defining.\n//\n//   isolating:: ?bool\n//   When enabled (default is false), the sides of nodes of this type\n//   count as boundaries that regular editing operations, like\n//   backspacing or lifting, won't cross. An example of a node that\n//   should probably have this enabled is a table cell.\n//\n//   toDOM:: ?(node: Node) → DOMOutputSpec\n//   Defines the default way a node of this type should be serialized\n//   to DOM/HTML (as used by\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\n//   Should return a DOM node or an [array\n//   structure](#model.DOMOutputSpec) that describes one, with an\n//   optional number zero (“hole”) in it to indicate where the node's\n//   content should be inserted.\n//\n//   For text nodes, the default is to create a text DOM node. Though\n//   it is possible to create a serializer where text is rendered\n//   differently, this is not supported inside the editor, so you\n//   shouldn't override that in your text node spec.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this node, which can be\n//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\n//   automatically derive a parser. The `node` field in the rules is\n//   implied (the name of this node will be filled in automatically).\n//   If you supply your own parser, you do not need to also specify\n//   parsing rules in your schema.\n//\n//   toDebugString:: ?(node: Node) -> string\n//   Defines the default way a node of this type should be serialized\n//   to a string representation for debugging (e.g. in error messages).\n\n// MarkSpec:: interface\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that marks of this type get.\n//\n//   inclusive:: ?bool\n//   Whether this mark should be active when the cursor is positioned\n//   at its end (or at its start when that is also the start of the\n//   parent node). Defaults to true.\n//\n//   excludes:: ?string\n//   Determines which other marks this mark can coexist with. Should\n//   be a space-separated strings naming other marks or groups of marks.\n//   When a mark is [added](#model.Mark.addToSet) to a set, all marks\n//   that it excludes are removed in the process. If the set contains\n//   any mark that excludes the new mark but is not, itself, excluded\n//   by the new mark, the mark can not be added an the set. You can\n//   use the value `\"_\"` to indicate that the mark excludes all\n//   marks in the schema.\n//\n//   Defaults to only being exclusive with marks of the same type. You\n//   can set it to an empty string (or any string not containing the\n//   mark's own name) to allow multiple marks of a given type to\n//   coexist (as long as they have different attributes).\n//\n//   group:: ?string\n//   The group or space-separated groups to which this mark belongs.\n//\n//   spanning:: ?bool\n//   Determines whether marks of this type can span multiple adjacent\n//   nodes when serialized to DOM/HTML. Defaults to true.\n//\n//   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec\n//   Defines the default way marks of this type should be serialized\n//   to DOM/HTML. When the resulting spec contains a hole, that is\n//   where the marked content is placed. Otherwise, it is appended to\n//   the top node.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this mark (see the\n//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The\n//   `mark` field in the rules is implied.\n\n// AttributeSpec:: interface\n//\n// Used to [define](#model.NodeSpec.attrs) attributes on nodes or\n// marks.\n//\n//   default:: ?any\n//   The default value for this attribute, to use when no explicit\n//   value is provided. Attributes that have no default must be\n//   provided whenever a node or mark of a type that has them is\n//   created.\n\n// ::- A document schema. Holds [node](#model.NodeType) and [mark\n// type](#model.MarkType) objects for the nodes and marks that may\n// occur in conforming documents, and provides functionality for\n// creating and deserializing such documents.\nexport class Schema {\n  // :: (SchemaSpec)\n  // Construct a schema from a schema [specification](#model.SchemaSpec).\n  constructor(spec) {\n    // :: SchemaSpec\n    // The [spec](#model.SchemaSpec) on which the schema is based,\n    // with the added guarantee that its `nodes` and `marks`\n    // properties are\n    // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\n    // (not raw objects).\n    this.spec = {}\n    for (let prop in spec) this.spec[prop] = spec[prop]\n    this.spec.nodes = OrderedMap.from(spec.nodes)\n    this.spec.marks = OrderedMap.from(spec.marks)\n\n    // :: Object<NodeType>\n    // An object mapping the schema's node names to node type objects.\n    this.nodes = NodeType.compile(this.spec.nodes, this)\n\n    // :: Object<MarkType>\n    // A map from mark names to mark type objects.\n    this.marks = MarkType.compile(this.spec.marks, this)\n\n    let contentExprCache = Object.create(null)\n    for (let prop in this.nodes) {\n      if (prop in this.marks)\n        throw new RangeError(prop + \" can not be both a node and a mark\")\n      let type = this.nodes[prop], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks\n      type.contentMatch = contentExprCache[contentExpr] ||\n        (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes))\n      type.inlineContent = type.contentMatch.inlineContent\n      type.markSet = markExpr == \"_\" ? null :\n        markExpr ? gatherMarks(this, markExpr.split(\" \")) :\n        markExpr == \"\" || !type.inlineContent ? [] : null\n    }\n    for (let prop in this.marks) {\n      let type = this.marks[prop], excl = type.spec.excludes\n      type.excluded = excl == null ? [type] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"))\n    }\n\n    this.nodeFromJSON = this.nodeFromJSON.bind(this)\n    this.markFromJSON = this.markFromJSON.bind(this)\n\n    // :: NodeType\n    // The type of the [default top node](#model.SchemaSpec.topNode)\n    // for this schema.\n    this.topNodeType = this.nodes[this.spec.topNode || \"doc\"]\n\n    // :: Object\n    // An object for storing whatever values modules may want to\n    // compute and cache per schema. (If you want to store something\n    // in it, try to use property names unlikely to clash.)\n    this.cached = Object.create(null)\n    this.cached.wrappings = Object.create(null)\n  }\n\n  // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a node in this schema. The `type` may be a string or a\n  // `NodeType` instance. Attributes will be extended\n  // with defaults, `content` may be a `Fragment`,\n  // `null`, a `Node`, or an array of nodes.\n  node(type, attrs, content, marks) {\n    if (typeof type == \"string\")\n      type = this.nodeType(type)\n    else if (!(type instanceof NodeType))\n      throw new RangeError(\"Invalid node type: \" + type)\n    else if (type.schema != this)\n      throw new RangeError(\"Node type from different schema used (\" + type.name + \")\")\n\n    return type.createChecked(attrs, content, marks)\n  }\n\n  // :: (string, ?[Mark]) → Node\n  // Create a text node in the schema. Empty text nodes are not\n  // allowed.\n  text(text, marks) {\n    let type = this.nodes.text\n    return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks))\n  }\n\n  // :: (union<string, MarkType>, ?Object) → Mark\n  // Create a mark with the given type and attributes.\n  mark(type, attrs) {\n    if (typeof type == \"string\") type = this.marks[type]\n    return type.create(attrs)\n  }\n\n  // :: (Object) → Node\n  // Deserialize a node from its JSON representation. This method is\n  // bound.\n  nodeFromJSON(json) {\n    return Node.fromJSON(this, json)\n  }\n\n  // :: (Object) → Mark\n  // Deserialize a mark from its JSON representation. This method is\n  // bound.\n  markFromJSON(json) {\n    return Mark.fromJSON(this, json)\n  }\n\n  nodeType(name) {\n    let found = this.nodes[name]\n    if (!found) throw new RangeError(\"Unknown node type: \" + name)\n    return found\n  }\n}\n\nfunction gatherMarks(schema, marks) {\n  let found = []\n  for (let i = 0; i < marks.length; i++) {\n    let name = marks[i], mark = schema.marks[name], ok = mark\n    if (mark) {\n      found.push(mark)\n    } else {\n      for (let prop in schema.marks) {\n        let mark = schema.marks[prop]\n        if (name == \"_\" || (mark.spec.group && mark.spec.group.split(\" \").indexOf(name) > -1))\n          found.push(ok = mark)\n      }\n    }\n    if (!ok) throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\")\n  }\n  return found\n}\n","import {Fragment} from \"./fragment\"\nimport {Slice} from \"./replace\"\nimport {Mark} from \"./mark\"\n\n// ParseOptions:: interface\n// These are the options recognized by the\n// [`parse`](#model.DOMParser.parse) and\n// [`parseSlice`](#model.DOMParser.parseSlice) methods.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   By default, whitespace is collapsed as per HTML's rules. Pass\n//   `true` to preserve whitespace, but normalize newlines to\n//   spaces, and `\"full\"` to preserve whitespace entirely.\n//\n//   findPositions:: ?[{node: dom.Node, offset: number}]\n//   When given, the parser will, beside parsing the content,\n//   record the document positions of the given DOM positions. It\n//   will do so by writing to the objects, adding a `pos` property\n//   that holds the document position. DOM positions that are not\n//   in the parsed content will not be written to.\n//\n//   from:: ?number\n//   The child node index to start parsing from.\n//\n//   to:: ?number\n//   The child node index to stop parsing at.\n//\n//   topNode:: ?Node\n//   By default, the content is parsed into the schema's default\n//   [top node type](#model.Schema.topNodeType). You can pass this\n//   option to use the type and attributes from a different node\n//   as the top container.\n//\n//   topMatch:: ?ContentMatch\n//   Provide the starting content match that content parsed into the\n//   top node is matched against.\n//\n//   context:: ?ResolvedPos\n//   A set of additional nodes to count as\n//   [context](#model.ParseRule.context) when parsing, above the\n//   given [top node](#model.ParseOptions.topNode).\n\n// ParseRule:: interface\n// A value that describes how to parse a given DOM node or inline\n// style as a ProseMirror node or mark.\n//\n//   tag:: ?string\n//   A CSS selector describing the kind of DOM elements to match. A\n//   single rule should have _either_ a `tag` or a `style` property.\n//\n//   namespace:: ?string\n//   The namespace to match. This should be used with `tag`.\n//   Nodes are only matched when the namespace matches or this property\n//   is null.\n//\n//   style:: ?string\n//   A CSS property name to match. When given, this rule matches\n//   inline styles that list that property. May also have the form\n//   `\"property=value\"`, in which case the rule only matches if the\n//   property's value exactly matches the given value. (For more\n//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)\n//   and return false to indicate that the match failed.) Rules\n//   matching styles may only produce [marks](#model.ParseRule.mark),\n//   not nodes.\n//\n//   priority:: ?number\n//   Can be used to change the order in which the parse rules in a\n//   schema are tried. Those with higher priority come first. Rules\n//   without a priority are counted as having priority 50. This\n//   property is only meaningful in a schema—when directly\n//   constructing a parser, the order of the rule array is used.\n//\n//   consuming:: ?boolean\n//   By default, when a rule matches an element or style, no further\n//   rules get a chance to match it. By setting this to `false`, you\n//   indicate that even when this rule matches, other rules that come\n//   after it should also run.\n//\n//   context:: ?string\n//   When given, restricts this rule to only match when the current\n//   context—the parent nodes into which the content is being\n//   parsed—matches this expression. Should contain one or more node\n//   names or node group names followed by single or double slashes.\n//   For example `\"paragraph/\"` means the rule only matches when the\n//   parent node is a paragraph, `\"blockquote/paragraph/\"` restricts\n//   it to be in a paragraph that is inside a blockquote, and\n//   `\"section//\"` matches any position inside a section—a double\n//   slash matches any sequence of ancestor nodes. To allow multiple\n//   different contexts, they can be separated by a pipe (`|`)\n//   character, as in `\"blockquote/|list_item/\"`.\n//\n//   node:: ?string\n//   The name of the node type to create when this rule matches. Only\n//   valid for rules with a `tag` property, not for style rules. Each\n//   rule should have one of a `node`, `mark`, or `ignore` property\n//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or\n//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`\n//   or `mark` property will be derived from its position).\n//\n//   mark:: ?string\n//   The name of the mark type to wrap the matched content in.\n//\n//   ignore:: ?bool\n//   When true, ignore content that matches this rule.\n//\n//   closeParent:: ?bool\n//   When true, finding an element that matches this rule will close\n//   the current node.\n//\n//   skip:: ?bool\n//   When true, ignore the node that matches this rule, but do parse\n//   its content.\n//\n//   attrs:: ?Object\n//   Attributes for the node or mark created by this rule. When\n//   `getAttrs` is provided, it takes precedence.\n//\n//   getAttrs:: ?(union<dom.Node, string>) → ?union<Object, false>\n//   A function used to compute the attributes for the node or mark\n//   created by this rule. Can also be used to describe further\n//   conditions the DOM element or style must match. When it returns\n//   `false`, the rule won't match. When it returns null or undefined,\n//   that is interpreted as an empty/default set of attributes.\n//\n//   Called with a DOM Element for `tag` rules, and with a string (the\n//   style's value) for `style` rules.\n//\n//   contentElement:: ?union<string, (dom.Node) → dom.Node>\n//   For `tag` rules that produce non-leaf nodes or marks, by default\n//   the content of the DOM element is parsed as content of the mark\n//   or node. If the child nodes are in a descendent node, this may be\n//   a CSS selector string that the parser must use to find the actual\n//   content element, or a function that returns the actual content\n//   element to the parser.\n//\n//   getContent:: ?(dom.Node, schema: Schema) → Fragment\n//   Can be used to override the content of a matched node. When\n//   present, instead of parsing the node's child nodes, the result of\n//   this function is used.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   Controls whether whitespace should be preserved when parsing the\n//   content inside the matched element. `false` means whitespace may\n//   be collapsed, `true` means that whitespace should be preserved\n//   but newlines normalized to spaces, and `\"full\"` means that\n//   newlines should also be preserved.\n\n// ::- A DOM parser represents a strategy for parsing DOM content into\n// a ProseMirror document conforming to a given schema. Its behavior\n// is defined by an array of [rules](#model.ParseRule).\nexport class DOMParser {\n  // :: (Schema, [ParseRule])\n  // Create a parser that targets the given schema, using the given\n  // parsing rules.\n  constructor(schema, rules) {\n    // :: Schema\n    // The schema into which the parser parses.\n    this.schema = schema\n    // :: [ParseRule]\n    // The set of [parse rules](#model.ParseRule) that the parser\n    // uses, in order of precedence.\n    this.rules = rules\n    this.tags = []\n    this.styles = []\n\n    rules.forEach(rule => {\n      if (rule.tag) this.tags.push(rule)\n      else if (rule.style) this.styles.push(rule)\n    })\n\n    // Only normalize list elements when lists in the schema can't directly contain themselves\n    this.normalizeLists = !this.tags.some(r => {\n      if (!/^(ul|ol)\\b/.test(r.tag) || !r.node) return false\n      let node = schema.nodes[r.node]\n      return node.contentMatch.matchType(node)\n    })\n  }\n\n  // :: (dom.Node, ?ParseOptions) → Node\n  // Parse a document from the content of a DOM node.\n  parse(dom, options = {}) {\n    let context = new ParseContext(this, options, false)\n    context.addAll(dom, null, options.from, options.to)\n    return context.finish()\n  }\n\n  // :: (dom.Node, ?ParseOptions) → Slice\n  // Parses the content of the given DOM node, like\n  // [`parse`](#model.DOMParser.parse), and takes the same set of\n  // options. But unlike that method, which produces a whole node,\n  // this one returns a slice that is open at the sides, meaning that\n  // the schema constraints aren't applied to the start of nodes to\n  // the left of the input and the end of nodes at the end.\n  parseSlice(dom, options = {}) {\n    let context = new ParseContext(this, options, true)\n    context.addAll(dom, null, options.from, options.to)\n    return Slice.maxOpen(context.finish())\n  }\n\n  matchTag(dom, context, after) {\n    for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {\n      let rule = this.tags[i]\n      if (matches(dom, rule.tag) &&\n          (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&\n          (!rule.context || context.matchesContext(rule.context))) {\n        if (rule.getAttrs) {\n          let result = rule.getAttrs(dom)\n          if (result === false) continue\n          rule.attrs = result\n        }\n        return rule\n      }\n    }\n  }\n\n  matchStyle(prop, value, context, after) {\n    for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {\n      let rule = this.styles[i]\n      if (rule.style.indexOf(prop) != 0 ||\n          rule.context && !context.matchesContext(rule.context) ||\n          // Test that the style string either precisely matches the prop,\n          // or has an '=' sign after the prop, followed by the given\n          // value.\n          rule.style.length > prop.length &&\n          (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value))\n        continue\n      if (rule.getAttrs) {\n        let result = rule.getAttrs(value)\n        if (result === false) continue\n        rule.attrs = result\n      }\n      return rule\n    }\n  }\n\n  // : (Schema) → [ParseRule]\n  static schemaRules(schema) {\n    let result = []\n    function insert(rule) {\n      let priority = rule.priority == null ? 50 : rule.priority, i = 0\n      for (; i < result.length; i++) {\n        let next = result[i], nextPriority = next.priority == null ? 50 : next.priority\n        if (nextPriority < priority) break\n      }\n      result.splice(i, 0, rule)\n    }\n\n    for (let name in schema.marks) {\n      let rules = schema.marks[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.mark = name\n      })\n    }\n    for (let name in schema.nodes) {\n      let rules = schema.nodes[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.node = name\n      })\n    }\n    return result\n  }\n\n  // :: (Schema) → DOMParser\n  // Construct a DOM parser using the parsing rules listed in a\n  // schema's [node specs](#model.NodeSpec.parseDOM), reordered by\n  // [priority](#model.ParseRule.priority).\n  static fromSchema(schema) {\n    return schema.cached.domParser ||\n      (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)))\n  }\n}\n\n// : Object<bool> The block-level tags in HTML5\nconst blockTags = {\n  address: true, article: true, aside: true, blockquote: true, canvas: true,\n  dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,\n  footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,\n  h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,\n  output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true\n}\n\n// : Object<bool> The tags that we normally ignore.\nconst ignoreTags = {\n  head: true, noscript: true, object: true, script: true, style: true, title: true\n}\n\n// : Object<bool> List tags.\nconst listTags = {ol: true, ul: true}\n\n// Using a bitfield for node context options\nconst OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4\n\nfunction wsOptionsFor(preserveWhitespace) {\n  return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0)\n}\n\nclass NodeContext {\n  constructor(type, attrs, marks, pendingMarks, solid, match, options) {\n    this.type = type\n    this.attrs = attrs\n    this.solid = solid\n    this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch)\n    this.options = options\n    this.content = []\n    // Marks applied to this node itself\n    this.marks = marks\n    // Marks applied to its children\n    this.activeMarks = Mark.none\n    // Marks that can't apply here, but will be used in children if possible\n    this.pendingMarks = pendingMarks\n    // Nested Marks with same type\n    this.stashMarks = []\n  }\n\n  findWrapping(node) {\n    if (!this.match) {\n      if (!this.type) return []\n      let fill = this.type.contentMatch.fillBefore(Fragment.from(node))\n      if (fill) {\n        this.match = this.type.contentMatch.matchFragment(fill)\n      } else {\n        let start = this.type.contentMatch, wrap\n        if (wrap = start.findWrapping(node.type)) {\n          this.match = start\n          return wrap\n        } else {\n          return null\n        }\n      }\n    }\n    return this.match.findWrapping(node.type)\n  }\n\n  finish(openEnd) {\n    if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace\n      let last = this.content[this.content.length - 1], m\n      if (last && last.isText && (m = /[ \\t\\r\\n\\u000c]+$/.exec(last.text))) {\n        if (last.text.length == m[0].length) this.content.pop()\n        else this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length))\n      }\n    }\n    let content = Fragment.from(this.content)\n    if (!openEnd && this.match)\n      content = content.append(this.match.fillBefore(Fragment.empty, true))\n    return this.type ? this.type.create(this.attrs, content, this.marks) : content\n  }\n\n  popFromStashMark(mark) {\n    for (let i = this.stashMarks.length - 1; i >= 0; i--)\n      if (mark.eq(this.stashMarks[i])) return this.stashMarks.splice(i, 1)[0]\n  }\n\n  applyPending(nextType) {\n    for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {\n      let mark = pending[i]\n      if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&\n          !mark.isInSet(this.activeMarks)) {\n        this.activeMarks = mark.addToSet(this.activeMarks)\n        this.pendingMarks = mark.removeFromSet(this.pendingMarks)\n      }\n    }\n  }\n}\n\nclass ParseContext {\n  // : (DOMParser, Object)\n  constructor(parser, options, open) {\n    // : DOMParser The parser we are using.\n    this.parser = parser\n    // : Object The options passed to this parse.\n    this.options = options\n    this.isOpen = open\n    let topNode = options.topNode, topContext\n    let topOptions = wsOptionsFor(options.preserveWhitespace) | (open ? OPT_OPEN_LEFT : 0)\n    if (topNode)\n      topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true,\n                                   options.topMatch || topNode.type.contentMatch, topOptions)\n    else if (open)\n      topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions)\n    else\n      topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions)\n    this.nodes = [topContext]\n    // : [Mark] The current set of marks\n    this.open = 0\n    this.find = options.findPositions\n    this.needsBlock = false\n  }\n\n  get top() {\n    return this.nodes[this.open]\n  }\n\n  // : (dom.Node)\n  // Add a DOM node to the content. Text is inserted as text node,\n  // otherwise, the node is passed to `addElement` or, if it has a\n  // `style` attribute, `addElementWithStyles`.\n  addDOM(dom) {\n    if (dom.nodeType == 3) {\n      this.addTextNode(dom)\n    } else if (dom.nodeType == 1) {\n      let style = dom.getAttribute(\"style\")\n      let marks = style ? this.readStyles(parseStyles(style)) : null, top = this.top\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.addPendingMark(marks[i])\n      this.addElement(dom)\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.removePendingMark(marks[i], top)\n    }\n  }\n\n  addTextNode(dom) {\n    let value = dom.nodeValue\n    let top = this.top\n    if (top.options & OPT_PRESERVE_WS_FULL ||\n        (top.type ? top.type.inlineContent : top.content.length && top.content[0].isInline) ||\n        /[^ \\t\\r\\n\\u000c]/.test(value)) {\n      if (!(top.options & OPT_PRESERVE_WS)) {\n        value = value.replace(/[ \\t\\r\\n\\u000c]+/g, \" \")\n        // If this starts with whitespace, and there is no node before it, or\n        // a hard break, or a text node that ends with whitespace, strip the\n        // leading space.\n        if (/^[ \\t\\r\\n\\u000c]/.test(value) && this.open == this.nodes.length - 1) {\n          let nodeBefore = top.content[top.content.length - 1]\n          let domNodeBefore = dom.previousSibling\n          if (!nodeBefore ||\n              (domNodeBefore && domNodeBefore.nodeName == 'BR') ||\n              (nodeBefore.isText && /[ \\t\\r\\n\\u000c]$/.test(nodeBefore.text)))\n            value = value.slice(1)\n        }\n      } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n        value = value.replace(/\\r?\\n|\\r/g, \" \")\n      } else {\n        value = value.replace(/\\r\\n?/g, \"\\n\")\n      }\n      if (value) this.insertNode(this.parser.schema.text(value))\n      this.findInText(dom)\n    } else {\n      this.findInside(dom)\n    }\n  }\n\n  // : (dom.Element, ?ParseRule)\n  // Try to find a handler for the given tag and use that to parse. If\n  // none is found, the element's content nodes are added directly.\n  addElement(dom, matchAfter) {\n    let name = dom.nodeName.toLowerCase(), ruleID\n    if (listTags.hasOwnProperty(name) && this.parser.normalizeLists) normalizeList(dom)\n    let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||\n        (ruleID = this.parser.matchTag(dom, this, matchAfter))\n    if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n      this.findInside(dom)\n      this.ignoreFallback(dom)\n    } else if (!rule || rule.skip || rule.closeParent) {\n      if (rule && rule.closeParent) this.open = Math.max(0, this.open - 1)\n      else if (rule && rule.skip.nodeType) dom = rule.skip\n      let sync, top = this.top, oldNeedsBlock = this.needsBlock\n      if (blockTags.hasOwnProperty(name)) {\n        sync = true\n        if (!top.type) this.needsBlock = true\n      } else if (!dom.firstChild) {\n        this.leafFallback(dom)\n        return\n      }\n      this.addAll(dom)\n      if (sync) this.sync(top)\n      this.needsBlock = oldNeedsBlock\n    } else {\n      this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : null)\n    }\n  }\n\n  // Called for leaf DOM nodes that would otherwise be ignored\n  leafFallback(dom) {\n    if (dom.nodeName == \"BR\" && this.top.type && this.top.type.inlineContent)\n      this.addTextNode(dom.ownerDocument.createTextNode(\"\\n\"))\n  }\n\n  // Called for ignored nodes\n  ignoreFallback(dom) {\n    // Ignored BR nodes should at least create an inline context\n    if (dom.nodeName == \"BR\" && (!this.top.type || !this.top.type.inlineContent))\n      this.findPlace(this.parser.schema.text(\"-\"))\n  }\n\n  // Run any style parser associated with the node's styles. Either\n  // return an array of marks, or null to indicate some of the styles\n  // had a rule with `ignore` set.\n  readStyles(styles) {\n    let marks = Mark.none\n    style: for (let i = 0; i < styles.length; i += 2) {\n      for (let after = null;;) {\n        let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after)\n        if (!rule) continue style\n        if (rule.ignore) return null\n        marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks)\n        if (rule.consuming === false) after = rule\n        else break\n      }\n    }\n    return marks\n  }\n\n  // : (dom.Element, ParseRule) → bool\n  // Look up a handler for the given node. If none are found, return\n  // false. Otherwise, apply it, use its return value to drive the way\n  // the node's content is wrapped, and return true.\n  addElementByRule(dom, rule, continueAfter) {\n    let sync, nodeType, markType, mark\n    if (rule.node) {\n      nodeType = this.parser.schema.nodes[rule.node]\n      if (!nodeType.isLeaf) {\n        sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace)\n      } else if (!this.insertNode(nodeType.create(rule.attrs))) {\n        this.leafFallback(dom)\n      }\n    } else {\n      markType = this.parser.schema.marks[rule.mark]\n      mark = markType.create(rule.attrs)\n      this.addPendingMark(mark)\n    }\n    let startIn = this.top\n\n    if (nodeType && nodeType.isLeaf) {\n      this.findInside(dom)\n    } else if (continueAfter) {\n      this.addElement(dom, continueAfter)\n    } else if (rule.getContent) {\n      this.findInside(dom)\n      rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node))\n    } else {\n      let contentDOM = rule.contentElement\n      if (typeof contentDOM == \"string\") contentDOM = dom.querySelector(contentDOM)\n      else if (typeof contentDOM == \"function\") contentDOM = contentDOM(dom)\n      if (!contentDOM) contentDOM = dom\n      this.findAround(dom, contentDOM, true)\n      this.addAll(contentDOM, sync)\n    }\n    if (sync) { this.sync(startIn); this.open-- }\n    if (mark) this.removePendingMark(mark, startIn)\n  }\n\n  // : (dom.Node, ?NodeBuilder, ?number, ?number)\n  // Add all child nodes between `startIndex` and `endIndex` (or the\n  // whole node, if not given). If `sync` is passed, use it to\n  // synchronize after every block element.\n  addAll(parent, sync, startIndex, endIndex) {\n    let index = startIndex || 0\n    for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild,\n             end = endIndex == null ? null : parent.childNodes[endIndex];\n         dom != end; dom = dom.nextSibling, ++index) {\n      this.findAtPoint(parent, index)\n      this.addDOM(dom)\n      if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase()))\n        this.sync(sync)\n    }\n    this.findAtPoint(parent, index)\n  }\n\n  // Try to find a way to fit the given node type into the current\n  // context. May add intermediate wrappers and/or leave non-solid\n  // nodes that we're in.\n  findPlace(node) {\n    let route, sync\n    for (let depth = this.open; depth >= 0; depth--) {\n      let cx = this.nodes[depth]\n      let found = cx.findWrapping(node)\n      if (found && (!route || route.length > found.length)) {\n        route = found\n        sync = cx\n        if (!found.length) break\n      }\n      if (cx.solid) break\n    }\n    if (!route) return false\n    this.sync(sync)\n    for (let i = 0; i < route.length; i++)\n      this.enterInner(route[i], null, false)\n    return true\n  }\n\n  // : (Node) → ?Node\n  // Try to insert the given node, adjusting the context when needed.\n  insertNode(node) {\n    if (node.isInline && this.needsBlock && !this.top.type) {\n      let block = this.textblockFromContext()\n      if (block) this.enterInner(block)\n    }\n    if (this.findPlace(node)) {\n      this.closeExtra()\n      let top = this.top\n      top.applyPending(node.type)\n      if (top.match) top.match = top.match.matchType(node.type)\n      let marks = top.activeMarks\n      for (let i = 0; i < node.marks.length; i++)\n        if (!top.type || top.type.allowsMarkType(node.marks[i].type))\n          marks = node.marks[i].addToSet(marks)\n      top.content.push(node.mark(marks))\n      return true\n    }\n    return false\n  }\n\n  // : (NodeType, ?Object) → bool\n  // Try to start a node of the given type, adjusting the context when\n  // necessary.\n  enter(type, attrs, preserveWS) {\n    let ok = this.findPlace(type.create(attrs))\n    if (ok) this.enterInner(type, attrs, true, preserveWS)\n    return ok\n  }\n\n  // Open a node of the given type\n  enterInner(type, attrs, solid, preserveWS) {\n    this.closeExtra()\n    let top = this.top\n    top.applyPending(type)\n    top.match = top.match && top.match.matchType(type, attrs)\n    let options = preserveWS == null ? top.options & ~OPT_OPEN_LEFT : wsOptionsFor(preserveWS)\n    if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0) options |= OPT_OPEN_LEFT\n    this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options))\n    this.open++\n  }\n\n  // Make sure all nodes above this.open are finished and added to\n  // their parents\n  closeExtra(openEnd) {\n    let i = this.nodes.length - 1\n    if (i > this.open) {\n      for (; i > this.open; i--) this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd))\n      this.nodes.length = this.open + 1\n    }\n  }\n\n  finish() {\n    this.open = 0\n    this.closeExtra(this.isOpen)\n    return this.nodes[0].finish(this.isOpen || this.options.topOpen)\n  }\n\n  sync(to) {\n    for (let i = this.open; i >= 0; i--) if (this.nodes[i] == to) {\n      this.open = i\n      return\n    }\n  }\n\n  get currentPos() {\n    this.closeExtra()\n    let pos = 0\n    for (let i = this.open; i >= 0; i--) {\n      let content = this.nodes[i].content\n      for (let j = content.length - 1; j >= 0; j--)\n        pos += content[j].nodeSize\n      if (i) pos++\n    }\n    return pos\n  }\n\n  findAtPoint(parent, offset) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == parent && this.find[i].offset == offset)\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findInside(parent) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findAround(parent, content, before) {\n    if (parent != content && this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n        let pos = content.compareDocumentPosition(this.find[i].node)\n        if (pos & (before ? 2 : 4))\n          this.find[i].pos = this.currentPos\n      }\n    }\n  }\n\n  findInText(textNode) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == textNode)\n        this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset)\n    }\n  }\n\n  // : (string) → bool\n  // Determines whether the given [context\n  // string](#ParseRule.context) matches this context.\n  matchesContext(context) {\n    if (context.indexOf(\"|\") > -1)\n      return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this)\n\n    let parts = context.split(\"/\")\n    let option = this.options.context\n    let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type)\n    let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1)\n    let match = (i, depth) => {\n      for (; i >= 0; i--) {\n        let part = parts[i]\n        if (part == \"\") {\n          if (i == parts.length - 1 || i == 0) continue\n          for (; depth >= minDepth; depth--)\n            if (match(i - 1, depth)) return true\n          return false\n        } else {\n          let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type\n              : option && depth >= minDepth ? option.node(depth - minDepth).type\n              : null\n          if (!next || (next.name != part && next.groups.indexOf(part) == -1))\n            return false\n          depth--\n        }\n      }\n      return true\n    }\n    return match(parts.length - 1, this.open)\n  }\n\n  textblockFromContext() {\n    let $context = this.options.context\n    if ($context) for (let d = $context.depth; d >= 0; d--) {\n      let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType\n      if (deflt && deflt.isTextblock && deflt.defaultAttrs) return deflt\n    }\n    for (let name in this.parser.schema.nodes) {\n      let type = this.parser.schema.nodes[name]\n      if (type.isTextblock && type.defaultAttrs) return type\n    }\n  }\n\n  addPendingMark(mark) {\n    let found = findSameMarkInSet(mark, this.top.pendingMarks)\n    if (found) this.top.stashMarks.push(found)\n    this.top.pendingMarks = mark.addToSet(this.top.pendingMarks)\n  }\n\n  removePendingMark(mark, upto) {\n    for (let depth = this.open; depth >= 0; depth--) {\n      let level = this.nodes[depth]\n      let found = level.pendingMarks.lastIndexOf(mark)\n      if (found > -1) {\n        level.pendingMarks = mark.removeFromSet(level.pendingMarks)\n      } else {\n        level.activeMarks = mark.removeFromSet(level.activeMarks)\n        let stashMark = level.popFromStashMark(mark)\n        if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))\n          level.activeMarks = stashMark.addToSet(level.activeMarks)\n      }\n      if (level == upto) break\n    }\n  }\n}\n\n// Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n  for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n    let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null\n    if (name && listTags.hasOwnProperty(name) && prevItem) {\n      prevItem.appendChild(child)\n      child = prevItem\n    } else if (name == \"li\") {\n      prevItem = child\n    } else if (name) {\n      prevItem = null\n    }\n  }\n}\n\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector)\n}\n\n// : (string) → [string]\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n  let re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g, m, result = []\n  while (m = re.exec(style)) result.push(m[1], m[2].trim())\n  return result\n}\n\nfunction copy(obj) {\n  let copy = {}\n  for (let prop in obj) copy[prop] = obj[prop]\n  return copy\n}\n\n// Used when finding a mark at the top level of a fragment parse.\n// Checks whether it would be reasonable to apply a given mark type to\n// a given node, by looking at the way the mark occurs in the schema.\nfunction markMayApply(markType, nodeType) {\n  let nodes = nodeType.schema.nodes\n  for (let name in nodes) {\n    let parent = nodes[name]\n    if (!parent.allowsMarkType(markType)) continue\n    let seen = [], scan = match => {\n      seen.push(match)\n      for (let i = 0; i < match.edgeCount; i++) {\n        let {type, next} = match.edge(i)\n        if (type == nodeType) return true\n        if (seen.indexOf(next) < 0 && scan(next)) return true\n      }\n    }\n    if (scan(parent.contentMatch)) return true\n  }\n}\n\nfunction findSameMarkInSet(mark, set) {\n  for (let i = 0; i < set.length; i++) {\n    if (mark.eq(set[i])) return set[i]\n  }\n}\n","// DOMOutputSpec:: interface\n// A description of a DOM structure. Can be either a string, which is\n// interpreted as a text node, a DOM node, which is interpreted as\n// itself, a `{dom: Node, contentDOM: ?Node}` object, or an array.\n//\n// An array describes a DOM element. The first value in the array\n// should be a string—the name of the DOM element, optionally prefixed\n// by a namespace URL and a space. If the second element is plain\n// object, it is interpreted as a set of attributes for the element.\n// Any elements after that (including the 2nd if it's not an attribute\n// object) are interpreted as children of the DOM elements, and must\n// either be valid `DOMOutputSpec` values, or the number zero.\n//\n// The number zero (pronounced “hole”) is used to indicate the place\n// where a node's child nodes should be inserted. If it occurs in an\n// output spec, it should be the only child element in its parent\n// node.\n\n// ::- A DOM serializer knows how to convert ProseMirror nodes and\n// marks of various types to DOM nodes.\nexport class DOMSerializer {\n  // :: (Object<(node: Node) → DOMOutputSpec>, Object<?(mark: Mark, inline: bool) → DOMOutputSpec>)\n  // Create a serializer. `nodes` should map node names to functions\n  // that take a node and return a description of the corresponding\n  // DOM. `marks` does the same for mark names, but also gets an\n  // argument that tells it whether the mark's content is block or\n  // inline content (for typical use, it'll always be inline). A mark\n  // serializer may be `null` to indicate that marks of that type\n  // should not be serialized.\n  constructor(nodes, marks) {\n    // :: Object<(node: Node) → DOMOutputSpec>\n    // The node serialization functions.\n    this.nodes = nodes || {}\n    // :: Object<?(mark: Mark, inline: bool) → DOMOutputSpec>\n    // The mark serialization functions.\n    this.marks = marks || {}\n  }\n\n  // :: (Fragment, ?Object) → dom.DocumentFragment\n  // Serialize the content of this fragment to a DOM fragment. When\n  // not in the browser, the `document` option, containing a DOM\n  // document, should be passed so that the serializer can create\n  // nodes.\n  serializeFragment(fragment, options = {}, target) {\n    if (!target) target = doc(options).createDocumentFragment()\n\n    let top = target, active = null\n    fragment.forEach(node => {\n      if (active || node.marks.length) {\n        if (!active) active = []\n        let keep = 0, rendered = 0\n        while (keep < active.length && rendered < node.marks.length) {\n          let next = node.marks[rendered]\n          if (!this.marks[next.type.name]) { rendered++; continue }\n          if (!next.eq(active[keep]) || next.type.spec.spanning === false) break\n          keep += 2; rendered++\n        }\n        while (keep < active.length) {\n          top = active.pop()\n          active.pop()\n        }\n        while (rendered < node.marks.length) {\n          let add = node.marks[rendered++]\n          let markDOM = this.serializeMark(add, node.isInline, options)\n          if (markDOM) {\n            active.push(add, top)\n            top.appendChild(markDOM.dom)\n            top = markDOM.contentDOM || markDOM.dom\n          }\n        }\n      }\n      top.appendChild(this.serializeNode(node, options))\n    })\n\n    return target\n  }\n\n  // :: (Node, ?Object) → dom.Node\n  // Serialize this node to a DOM node. This can be useful when you\n  // need to serialize a part of a document, as opposed to the whole\n  // document. To serialize a whole document, use\n  // [`serializeFragment`](#model.DOMSerializer.serializeFragment) on\n  // its [content](#model.Node.content).\n  serializeNode(node, options = {}) {\n    let {dom, contentDOM} =\n        DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node))\n    if (contentDOM) {\n      if (node.isLeaf)\n        throw new RangeError(\"Content hole not allowed in a leaf node spec\")\n      if (options.onContent)\n        options.onContent(node, contentDOM, options)\n      else\n        this.serializeFragment(node.content, options, contentDOM)\n    }\n    return dom\n  }\n\n  serializeNodeAndMarks(node, options = {}) {\n    let dom = this.serializeNode(node, options)\n    for (let i = node.marks.length - 1; i >= 0; i--) {\n      let wrap = this.serializeMark(node.marks[i], node.isInline, options)\n      if (wrap) {\n        ;(wrap.contentDOM || wrap.dom).appendChild(dom)\n        dom = wrap.dom\n      }\n    }\n    return dom\n  }\n\n  serializeMark(mark, inline, options = {}) {\n    let toDOM = this.marks[mark.type.name]\n    return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline))\n  }\n\n  // :: (dom.Document, DOMOutputSpec) → {dom: dom.Node, contentDOM: ?dom.Node}\n  // Render an [output spec](#model.DOMOutputSpec) to a DOM node. If\n  // the spec has a hole (zero) in it, `contentDOM` will point at the\n  // node with the hole.\n  static renderSpec(doc, structure, xmlNS = null) {\n    if (typeof structure == \"string\")\n      return {dom: doc.createTextNode(structure)}\n    if (structure.nodeType != null)\n      return {dom: structure}\n    if (structure.dom && structure.dom.nodeType != null)\n      return structure\n    let tagName = structure[0], space = tagName.indexOf(\" \")\n    if (space > 0) {\n      xmlNS = tagName.slice(0, space)\n      tagName = tagName.slice(space + 1)\n    }\n    let contentDOM = null, dom = xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName)\n    let attrs = structure[1], start = 1\n    if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n      start = 2\n      for (let name in attrs) if (attrs[name] != null) {\n        let space = name.indexOf(\" \")\n        if (space > 0) dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name])\n        else dom.setAttribute(name, attrs[name])\n      }\n    }\n    for (let i = start; i < structure.length; i++) {\n      let child = structure[i]\n      if (child === 0) {\n        if (i < structure.length - 1 || i > start)\n          throw new RangeError(\"Content hole must be the only child of its parent node\")\n        return {dom, contentDOM: dom}\n      } else {\n        let {dom: inner, contentDOM: innerContent} = DOMSerializer.renderSpec(doc, child, xmlNS)\n        dom.appendChild(inner)\n        if (innerContent) {\n          if (contentDOM) throw new RangeError(\"Multiple content holes\")\n          contentDOM = innerContent\n        }\n      }\n    }\n    return {dom, contentDOM}\n  }\n\n  // :: (Schema) → DOMSerializer\n  // Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)\n  // properties in a schema's node and mark specs.\n  static fromSchema(schema) {\n    return schema.cached.domSerializer ||\n      (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)))\n  }\n\n  // : (Schema) → Object<(node: Node) → DOMOutputSpec>\n  // Gather the serializers in a schema's node specs into an object.\n  // This can be useful as a base to build a custom serializer from.\n  static nodesFromSchema(schema) {\n    let result = gatherToDOM(schema.nodes)\n    if (!result.text) result.text = node => node.text\n    return result\n  }\n\n  // : (Schema) → Object<(mark: Mark) → DOMOutputSpec>\n  // Gather the serializers in a schema's mark specs into an object.\n  static marksFromSchema(schema) {\n    return gatherToDOM(schema.marks)\n  }\n}\n\nfunction gatherToDOM(obj) {\n  let result = {}\n  for (let name in obj) {\n    let toDOM = obj[name].spec.toDOM\n    if (toDOM) result[name] = toDOM\n  }\n  return result\n}\n\nfunction doc(options) {\n  // declare global: window\n  return options.document || window.document\n}\n","// Mappable:: interface\n// There are several things that positions can be mapped through.\n// Such objects conform to this interface.\n//\n//   map:: (pos: number, assoc: ?number) → number\n//   Map a position through this object. When given, `assoc` (should\n//   be -1 or 1, defaults to 1) determines with which side the\n//   position is associated, which determines in which direction to\n//   move when a chunk of content is inserted at the mapped position.\n//\n//   mapResult:: (pos: number, assoc: ?number) → MapResult\n//   Map a position, and return an object containing additional\n//   information about the mapping. The result's `deleted` field tells\n//   you whether the position was deleted (completely enclosed in a\n//   replaced range) during the mapping. When content on only one side\n//   is deleted, the position itself is only considered deleted when\n//   `assoc` points in the direction of the deleted content.\n\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\n\nconst lower16 = 0xffff\nconst factor16 = Math.pow(2, 16)\n\nfunction makeRecover(index, offset) { return index + offset * factor16 }\nfunction recoverIndex(value) { return value & lower16 }\nfunction recoverOffset(value) { return (value - (value & lower16)) / factor16 }\n\n// ::- An object representing a mapped position with extra\n// information.\nexport class MapResult {\n  constructor(pos, deleted = false, recover = null) {\n    // :: number The mapped version of the position.\n    this.pos = pos\n    // :: bool Tells you whether the position was deleted, that is,\n    // whether the step removed its surroundings from the document.\n    this.deleted = deleted\n    this.recover = recover\n  }\n}\n\n// :: class extends Mappable\n// A map describing the deletions and insertions made by a step, which\n// can be used to find the correspondence between positions in the\n// pre-step version of a document and the same position in the\n// post-step version.\nexport class StepMap {\n  // :: ([number])\n  // Create a position map. The modifications to the document are\n  // represented as an array of numbers, in which each group of three\n  // represents a modified chunk as `[start, oldSize, newSize]`.\n  constructor(ranges, inverted = false) {\n    this.ranges = ranges\n    this.inverted = inverted\n  }\n\n  recover(value) {\n    let diff = 0, index = recoverIndex(value)\n    if (!this.inverted) for (let i = 0; i < index; i++)\n      diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1]\n    return this.ranges[index * 3] + diff + recoverOffset(value)\n  }\n\n  // : (number, ?number) → MapResult\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  // : (number, ?number) → number\n  map(pos, assoc = 1) { return this._map(pos, assoc, true) }\n\n  _map(pos, assoc, simple) {\n    let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize\n      if (pos <= end) {\n        let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc\n        let result = start + diff + (side < 0 ? 0 : newSize)\n        if (simple) return result\n        let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start)\n        return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover)\n      }\n      diff += newSize - oldSize\n    }\n    return simple ? pos + diff : new MapResult(pos + diff)\n  }\n\n  touches(pos, recover) {\n    let diff = 0, index = recoverIndex(recover)\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], end = start + oldSize\n      if (pos <= end && i == index * 3) return true\n      diff += this.ranges[i + newIndex] - oldSize\n    }\n    return false\n  }\n\n  // :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))\n  // Calls the given function on each of the changed ranges included in\n  // this map.\n  forEach(f) {\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff)\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex]\n      f(oldStart, oldStart + oldSize, newStart, newStart + newSize)\n      diff += newSize - oldSize\n    }\n  }\n\n  // :: () → StepMap\n  // Create an inverted version of this map. The result can be used to\n  // map positions in the post-step document to the pre-step document.\n  invert() {\n    return new StepMap(this.ranges, !this.inverted)\n  }\n\n  toString() {\n    return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges)\n  }\n\n  // :: (n: number) → StepMap\n  // Create a map that moves all positions by offset `n` (which may be\n  // negative). This can be useful when applying steps meant for a\n  // sub-document to a larger document, or vice-versa.\n  static offset(n) {\n    return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n])\n  }\n}\n\nStepMap.empty = new StepMap([])\n\n// :: class extends Mappable\n// A mapping represents a pipeline of zero or more [step\n// maps](#transform.StepMap). It has special provisions for losslessly\n// handling mapping positions through a series of steps in which some\n// steps are inverted versions of earlier steps. (This comes up when\n// ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for\n// collaboration or history management.)\nexport class Mapping {\n  // :: (?[StepMap])\n  // Create a new mapping with the given position maps.\n  constructor(maps, mirror, from, to) {\n    // :: [StepMap]\n    // The step maps in this mapping.\n    this.maps = maps || []\n    // :: number\n    // The starting position in the `maps` array, used when `map` or\n    // `mapResult` is called.\n    this.from = from || 0\n    // :: number\n    // The end position in the `maps` array.\n    this.to = to == null ? this.maps.length : to\n    this.mirror = mirror\n  }\n\n  // :: (?number, ?number) → Mapping\n  // Create a mapping that maps only through a part of this one.\n  slice(from = 0, to = this.maps.length) {\n    return new Mapping(this.maps, this.mirror, from, to)\n  }\n\n  copy() {\n    return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to)\n  }\n\n  // :: (StepMap, ?number)\n  // Add a step map to the end of this mapping. If `mirrors` is\n  // given, it should be the index of the step map that is the mirror\n  // image of this one.\n  appendMap(map, mirrors) {\n    this.to = this.maps.push(map)\n    if (mirrors != null) this.setMirror(this.maps.length - 1, mirrors)\n  }\n\n  // :: (Mapping)\n  // Add all the step maps in a given mapping to this one (preserving\n  // mirroring information).\n  appendMapping(mapping) {\n    for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null)\n    }\n  }\n\n  // :: (number) → ?number\n  // Finds the offset of the step map that mirrors the map at the\n  // given offset, in this mapping (as per the second argument to\n  // `appendMap`).\n  getMirror(n) {\n    if (this.mirror) for (let i = 0; i < this.mirror.length; i++)\n      if (this.mirror[i] == n) return this.mirror[i + (i % 2 ? -1 : 1)]\n  }\n\n  setMirror(n, m) {\n    if (!this.mirror) this.mirror = []\n    this.mirror.push(n, m)\n  }\n\n  // :: (Mapping)\n  // Append the inverse of the given mapping to this one.\n  appendMappingInverted(mapping) {\n    for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null)\n    }\n  }\n\n  // :: () → Mapping\n  // Create an inverted version of this mapping.\n  invert() {\n    let inverse = new Mapping\n    inverse.appendMappingInverted(this)\n    return inverse\n  }\n\n  // : (number, ?number) → number\n  // Map a position through this mapping.\n  map(pos, assoc = 1) {\n    if (this.mirror) return this._map(pos, assoc, true)\n    for (let i = this.from; i < this.to; i++)\n      pos = this.maps[i].map(pos, assoc)\n    return pos\n  }\n\n  // : (number, ?number) → MapResult\n  // Map a position through this mapping, returning a mapping\n  // result.\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  _map(pos, assoc, simple) {\n    let deleted = false\n\n    for (let i = this.from; i < this.to; i++) {\n      let map = this.maps[i], result = map.mapResult(pos, assoc)\n      if (result.recover != null) {\n        let corr = this.getMirror(i)\n        if (corr != null && corr > i && corr < this.to) {\n          i = corr\n          pos = this.maps[corr].recover(result.recover)\n          continue\n        }\n      }\n\n      if (result.deleted) deleted = true\n      pos = result.pos\n    }\n\n    return simple ? pos : new MapResult(pos, deleted)\n  }\n}\n","import {Mapping} from \"./map\"\n\nexport function TransformError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = TransformError.prototype\n  return err\n}\n\nTransformError.prototype = Object.create(Error.prototype)\nTransformError.prototype.constructor = TransformError\nTransformError.prototype.name = \"TransformError\"\n\n// ::- Abstraction to build up and track an array of\n// [steps](#transform.Step) representing a document transformation.\n//\n// Most transforming methods return the `Transform` object itself, so\n// that they can be chained.\nexport class Transform {\n  // :: (Node)\n  // Create a transform that starts with the given document.\n  constructor(doc) {\n    // :: Node\n    // The current document (the result of applying the steps in the\n    // transform).\n    this.doc = doc\n    // :: [Step]\n    // The steps in this transform.\n    this.steps = []\n    // :: [Node]\n    // The documents before each of the steps.\n    this.docs = []\n    // :: Mapping\n    // A mapping with the maps for each of the steps in this transform.\n    this.mapping = new Mapping\n  }\n\n  // :: Node The starting document.\n  get before() { return this.docs.length ? this.docs[0] : this.doc }\n\n  // :: (step: Step) → this\n  // Apply a new step in this transform, saving the result. Throws an\n  // error when the step fails.\n  step(object) {\n    let result = this.maybeStep(object)\n    if (result.failed) throw new TransformError(result.failed)\n    return this\n  }\n\n  // :: (Step) → StepResult\n  // Try to apply a step in this transformation, ignoring it if it\n  // fails. Returns the step result.\n  maybeStep(step) {\n    let result = step.apply(this.doc)\n    if (!result.failed) this.addStep(step, result.doc)\n    return result\n  }\n\n  // :: bool\n  // True when the document has been changed (when there are any\n  // steps).\n  get docChanged() {\n    return this.steps.length > 0\n  }\n\n  addStep(step, doc) {\n    this.docs.push(this.doc)\n    this.steps.push(step)\n    this.mapping.appendMap(step.getMap())\n    this.doc = doc\n  }\n}\n","import {ReplaceError} from \"prosemirror-model\"\n\nimport {StepMap} from \"./map\"\n\nfunction mustOverride() { throw new Error(\"Override me\") }\n\nconst stepsByID = Object.create(null)\n\n// ::- A step object represents an atomic change. It generally applies\n// only to the document it was created for, since the positions\n// stored in it will only make sense for that document.\n//\n// New steps are defined by creating classes that extend `Step`,\n// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\n// methods, and registering your class with a unique\n// JSON-serialization identifier using\n// [`Step.jsonID`](#transform.Step^jsonID).\nexport class Step {\n  // :: (doc: Node) → StepResult\n  // Applies this step to the given document, returning a result\n  // object that either indicates failure, if the step can not be\n  // applied to this document, or indicates success by containing a\n  // transformed document.\n  apply(_doc) { return mustOverride() }\n\n  // :: () → StepMap\n  // Get the step map that represents the changes made by this step,\n  // and which can be used to transform between positions in the old\n  // and the new document.\n  getMap() { return StepMap.empty }\n\n  // :: (doc: Node) → Step\n  // Create an inverted version of this step. Needs the document as it\n  // was before the step as argument.\n  invert(_doc) { return mustOverride() }\n\n  // :: (mapping: Mappable) → ?Step\n  // Map this step through a mappable thing, returning either a\n  // version of that step with its positions adjusted, or `null` if\n  // the step was entirely deleted by the mapping.\n  map(_mapping) { return mustOverride() }\n\n  // :: (other: Step) → ?Step\n  // Try to merge this step with another one, to be applied directly\n  // after it. Returns the merged step when possible, null if the\n  // steps can't be merged.\n  merge(_other) { return null }\n\n  // :: () → Object\n  // Create a JSON-serializeable representation of this step. When\n  // defining this for a custom subclass, make sure the result object\n  // includes the step type's [JSON id](#transform.Step^jsonID) under\n  // the `stepType` property.\n  toJSON() { return mustOverride() }\n\n  // :: (Schema, Object) → Step\n  // Deserialize a step from its JSON representation. Will call\n  // through to the step class' own implementation of this method.\n  static fromJSON(schema, json) {\n    if (!json || !json.stepType) throw new RangeError(\"Invalid input for Step.fromJSON\")\n    let type = stepsByID[json.stepType]\n    if (!type) throw new RangeError(`No step type ${json.stepType} defined`)\n    return type.fromJSON(schema, json)\n  }\n\n  // :: (string, constructor<Step>)\n  // To be able to serialize steps to JSON, each step needs a string\n  // ID to attach to its JSON representation. Use this method to\n  // register an ID for your step classes. Try to pick something\n  // that's unlikely to clash with steps from other modules.\n  static jsonID(id, stepClass) {\n    if (id in stepsByID) throw new RangeError(\"Duplicate use of step JSON ID \" + id)\n    stepsByID[id] = stepClass\n    stepClass.prototype.jsonID = id\n    return stepClass\n  }\n}\n\n// ::- The result of [applying](#transform.Step.apply) a step. Contains either a\n// new document or a failure value.\nexport class StepResult {\n  // : (?Node, ?string)\n  constructor(doc, failed) {\n    // :: ?Node The transformed document.\n    this.doc = doc\n    // :: ?string Text providing information about a failed step.\n    this.failed = failed\n  }\n\n  // :: (Node) → StepResult\n  // Create a successful step result.\n  static ok(doc) { return new StepResult(doc, null) }\n\n  // :: (string) → StepResult\n  // Create a failed step result.\n  static fail(message) { return new StepResult(null, message) }\n\n  // :: (Node, number, number, Slice) → StepResult\n  // Call [`Node.replace`](#model.Node.replace) with the given\n  // arguments. Create a successful result if it succeeds, and a\n  // failed one if it throws a `ReplaceError`.\n  static fromReplace(doc, from, to, slice) {\n    try {\n      return StepResult.ok(doc.replace(from, to, slice))\n    } catch (e) {\n      if (e instanceof ReplaceError) return StepResult.fail(e.message)\n      throw e\n    }\n  }\n}\n","import {Slice} from \"prosemirror-model\"\n\nimport {Step, StepResult} from \"./step\"\nimport {StepMap} from \"./map\"\n\n// ::- Replace a part of the document with a slice of new content.\nexport class ReplaceStep extends Step {\n  // :: (number, number, Slice, ?bool)\n  // The given `slice` should fit the 'gap' between `from` and\n  // `to`—the depths must line up, and the surrounding nodes must be\n  // able to be joined with the open sides of the slice. When\n  // `structure` is true, the step will fail if the content between\n  // from and to is not just a sequence of closing and then opening\n  // tokens (this is to guard against rebased replace steps\n  // overwriting something they weren't supposed to).\n  constructor(from, to, slice, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && contentBetween(doc, this.from, this.to))\n      return StepResult.fail(\"Structure replace would overwrite content\")\n    return StepResult.fromReplace(doc, this.from, this.to, this.slice)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.to - this.from, this.slice.size])\n  }\n\n  invert(doc) {\n    return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to))\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted) return null\n    return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice)\n  }\n\n  merge(other) {\n    if (!(other instanceof ReplaceStep) || other.structure || this.structure) return null\n\n    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd)\n      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure)\n    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd)\n      return new ReplaceStep(other.from, this.to, slice, this.structure)\n    } else {\n      return null\n    }\n  }\n\n  toJSON() {\n    let json = {stepType: \"replace\", from: this.from, to: this.to}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\")\n    return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure)\n  }\n}\n\nStep.jsonID(\"replace\", ReplaceStep)\n\n// ::- Replace a part of the document with a slice of content, but\n// preserve a range of the replaced content by moving it into the\n// slice.\nexport class ReplaceAroundStep extends Step {\n  // :: (number, number, number, number, Slice, number, ?bool)\n  // Create a replace-around step with the given range and gap.\n  // `insert` should be the point in the slice into which the content\n  // of the gap should be moved. `structure` has the same meaning as\n  // it has in the [`ReplaceStep`](#transform.ReplaceStep) class.\n  constructor(from, to, gapFrom, gapTo, slice, insert, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: number\n    // The start of preserved range.\n    this.gapFrom = gapFrom\n    // :: number\n    // The end of preserved range.\n    this.gapTo = gapTo\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    // :: number\n    // The position in the slice where the preserved range should be\n    // inserted.\n    this.insert = insert\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||\n                           contentBetween(doc, this.gapTo, this.to)))\n      return StepResult.fail(\"Structure gap-replace would overwrite content\")\n\n    let gap = doc.slice(this.gapFrom, this.gapTo)\n    if (gap.openStart || gap.openEnd)\n      return StepResult.fail(\"Gap is not a flat range\")\n    let inserted = this.slice.insertAt(this.insert, gap.content)\n    if (!inserted) return StepResult.fail(\"Content does not fit in gap\")\n    return StepResult.fromReplace(doc, this.from, this.to, inserted)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.gapFrom - this.from, this.insert,\n                        this.gapTo, this.to - this.gapTo, this.slice.size - this.insert])\n  }\n\n  invert(doc) {\n    let gap = this.gapTo - this.gapFrom\n    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap,\n                                 this.from + this.insert, this.from + this.insert + gap,\n                                 doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from),\n                                 this.gapFrom - this.from, this.structure)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1)\n    if ((from.deleted && to.deleted) || gapFrom < from.pos || gapTo > to.pos) return null\n    return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure)\n  }\n\n  toJSON() {\n    let json = {stepType: \"replaceAround\", from: this.from, to: this.to,\n                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\" ||\n        typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\")\n    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo,\n                                 Slice.fromJSON(schema, json.slice), json.insert, !!json.structure)\n  }\n}\n\nStep.jsonID(\"replaceAround\", ReplaceAroundStep)\n\nfunction contentBetween(doc, from, to) {\n  let $from = doc.resolve(from), dist = to - from, depth = $from.depth\n  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n    depth--\n    dist--\n  }\n  if (dist > 0) {\n    let next = $from.node(depth).maybeChild($from.indexAfter(depth))\n    while (dist > 0) {\n      if (!next || next.isLeaf) return true\n      next = next.firstChild\n      dist--\n    }\n  }\n  return false\n}\n","import {Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\n\nfunction canCut(node, start, end) {\n  return (start == 0 || node.canReplace(start, node.childCount)) &&\n    (end == node.childCount || node.canReplace(0, end))\n}\n\n// :: (NodeRange) → ?number\n// Try to find a target depth to which the content in the given range\n// can be lifted. Will not go across\n// [isolating](#model.NodeSpec.isolating) parent nodes.\nexport function liftTarget(range) {\n  let parent = range.parent\n  let content = parent.content.cutByIndex(range.startIndex, range.endIndex)\n  for (let depth = range.depth;; --depth) {\n    let node = range.$from.node(depth)\n    let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth)\n    if (depth < range.depth && node.canReplace(index, endIndex, content))\n      return depth\n    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) break\n  }\n}\n\n// :: (NodeRange, number) → this\n// Split the content in the given range off from its parent, if there\n// is sibling content before or after it, and move it up the tree to\n// the depth specified by `target`. You'll probably want to use\n// [`liftTarget`](#transform.liftTarget) to compute `target`, to make\n// sure the lift is valid.\nTransform.prototype.lift = function(range, target) {\n  let {$from, $to, depth} = range\n\n  let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1)\n  let start = gapStart, end = gapEnd\n\n  let before = Fragment.empty, openStart = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $from.index(d) > 0) {\n      splitting = true\n      before = Fragment.from($from.node(d).copy(before))\n      openStart++\n    } else {\n      start--\n    }\n  let after = Fragment.empty, openEnd = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $to.after(d + 1) < $to.end(d)) {\n      splitting = true\n      after = Fragment.from($to.node(d).copy(after))\n      openEnd++\n    } else {\n      end++\n    }\n\n  return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd,\n                                         new Slice(before.append(after), openStart, openEnd),\n                                         before.size - openStart, true))\n}\n\n// :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]\n// Try to find a valid way to wrap the content in the given range in a\n// node of the given type. May introduce extra nodes around and inside\n// the wrapper node, if necessary. Returns null if no valid wrapping\n// could be found. When `innerRange` is given, that range's content is\n// used as the content to fit into the wrapping, instead of the\n// content of `range`.\nexport function findWrapping(range, nodeType, attrs, innerRange = range) {\n  let around = findWrappingOutside(range, nodeType)\n  let inner = around && findWrappingInside(innerRange, nodeType)\n  if (!inner) return null\n  return around.map(withAttrs).concat({type: nodeType, attrs}).concat(inner.map(withAttrs))\n}\n\nfunction withAttrs(type) { return {type, attrs: null} }\n\nfunction findWrappingOutside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let around = parent.contentMatchAt(startIndex).findWrapping(type)\n  if (!around) return null\n  let outer = around.length ? around[0] : type\n  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null\n}\n\nfunction findWrappingInside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let inner = parent.child(startIndex)\n  let inside = type.contentMatch.findWrapping(inner.type)\n  if (!inside) return null\n  let lastType = inside.length ? inside[inside.length - 1] : type\n  let innerMatch = lastType.contentMatch\n  for (let i = startIndex; innerMatch && i < endIndex; i++)\n    innerMatch = innerMatch.matchType(parent.child(i).type)\n  if (!innerMatch || !innerMatch.validEnd) return null\n  return inside\n}\n\n// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this\n// Wrap the given [range](#model.NodeRange) in the given set of wrappers.\n// The wrappers are assumed to be valid in this position, and should\n// probably be computed with [`findWrapping`](#transform.findWrapping).\nTransform.prototype.wrap = function(range, wrappers) {\n  let content = Fragment.empty\n  for (let i = wrappers.length - 1; i >= 0; i--)\n    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content))\n\n  let start = range.start, end = range.end\n  return this.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true))\n}\n\n// :: (number, ?number, NodeType, ?Object) → this\n// Set the type of all textblocks (partly) between `from` and `to` to\n// the given node type with the given attributes.\nTransform.prototype.setBlockType = function(from, to = from, type, attrs) {\n  if (!type.isTextblock) throw new RangeError(\"Type given to setBlockType should be a textblock\")\n  let mapFrom = this.steps.length\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this.doc, this.mapping.slice(mapFrom).map(pos), type)) {\n      // Ensure all markup that isn't allowed in the new node type is cleared\n      this.clearIncompatible(this.mapping.slice(mapFrom).map(pos, 1), type)\n      let mapping = this.mapping.slice(mapFrom)\n      let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1)\n      this.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1,\n                                      new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true))\n      return false\n    }\n  })\n  return this\n}\n\nfunction canChangeType(doc, pos, type) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return $pos.parent.canReplaceWith(index, index + 1, type)\n}\n\n// :: (number, ?NodeType, ?Object, ?[Mark]) → this\n// Change the type, attributes, and/or marks of the node at `pos`.\n// When `type` isn't given, the existing node type is preserved,\nTransform.prototype.setNodeMarkup = function(pos, type, attrs, marks) {\n  let node = this.doc.nodeAt(pos)\n  if (!node) throw new RangeError(\"No node at given position\")\n  if (!type) type = node.type\n  let newNode = type.create(attrs, null, marks || node.marks)\n  if (node.isLeaf)\n    return this.replaceWith(pos, pos + node.nodeSize, newNode)\n\n  if (!type.validContent(node.content))\n    throw new RangeError(\"Invalid content for node type \" + type.name)\n\n  return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1,\n                                         new Slice(Fragment.from(newNode), 0, 0), 1, true))\n}\n\n// :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool\n// Check whether splitting at the given position is allowed.\nexport function canSplit(doc, pos, depth = 1, typesAfter) {\n  let $pos = doc.resolve(pos), base = $pos.depth - depth\n  let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent\n  if (base < 0 || $pos.parent.type.spec.isolating ||\n      !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||\n      !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))\n    return false\n  for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n    let node = $pos.node(d), index = $pos.index(d)\n    if (node.type.spec.isolating) return false\n    let rest = node.content.cutByIndex(index, node.childCount)\n    let after = (typesAfter && typesAfter[i]) || node\n    if (after != node) rest = rest.replaceChild(0, after.type.create(after.attrs))\n    if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))\n      return false\n  }\n  let index = $pos.indexAfter(base)\n  let baseType = typesAfter && typesAfter[0]\n  return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type)\n}\n\n// :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this\n// Split the node at the given position, and optionally, if `depth` is\n// greater than one, any number of nodes above that. By default, the\n// parts split off will inherit the node type of the original node.\n// This can be changed by passing an array of types and attributes to\n// use after the split.\nTransform.prototype.split = function(pos, depth = 1, typesAfter) {\n  let $pos = this.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty\n  for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n    before = Fragment.from($pos.node(d).copy(before))\n    let typeAfter = typesAfter && typesAfter[i]\n    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after))\n  }\n  return this.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true))\n}\n\n// :: (Node, number) → bool\n// Test whether the blocks before and after a given position can be\n// joined.\nexport function canJoin(doc, pos) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return joinable($pos.nodeBefore, $pos.nodeAfter) &&\n    $pos.parent.canReplace(index, index + 1)\n}\n\nfunction joinable(a, b) {\n  return a && b && !a.isLeaf && a.canAppend(b)\n}\n\n// :: (Node, number, ?number) → ?number\n// Find an ancestor of the given position that can be joined to the\n// block before (or after if `dir` is positive). Returns the joinable\n// point, if any.\nexport function joinPoint(doc, pos, dir = -1) {\n  let $pos = doc.resolve(pos)\n  for (let d = $pos.depth;; d--) {\n    let before, after, index = $pos.index(d)\n    if (d == $pos.depth) {\n      before = $pos.nodeBefore\n      after = $pos.nodeAfter\n    } else if (dir > 0) {\n      before = $pos.node(d + 1)\n      index++\n      after = $pos.node(d).maybeChild(index)\n    } else {\n      before = $pos.node(d).maybeChild(index - 1)\n      after = $pos.node(d + 1)\n    }\n    if (before && !before.isTextblock && joinable(before, after) &&\n        $pos.node(d).canReplace(index, index + 1)) return pos\n    if (d == 0) break\n    pos = dir < 0 ? $pos.before(d) : $pos.after(d)\n  }\n}\n\n// :: (number, ?number) → this\n// Join the blocks around the given position. If depth is 2, their\n// last and first siblings are also joined, and so on.\nTransform.prototype.join = function(pos, depth = 1) {\n  let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true)\n  return this.step(step)\n}\n\n// :: (Node, number, NodeType) → ?number\n// Try to find a point where a node of the given type can be inserted\n// near `pos`, by searching up the node hierarchy when `pos` itself\n// isn't a valid place but is at the start or end of a node. Return\n// null if no position was found.\nexport function insertPoint(doc, pos, nodeType) {\n  let $pos = doc.resolve(pos)\n  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) return pos\n\n  if ($pos.parentOffset == 0)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.index(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.before(d + 1)\n      if (index > 0) return null\n    }\n  if ($pos.parentOffset == $pos.parent.content.size)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.indexAfter(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.after(d + 1)\n      if (index < $pos.node(d).childCount) return null\n    }\n}\n\n// :: (Node, number, Slice) → ?number\n// Finds a position at or around the given position where the given\n// slice can be inserted. Will look at parent nodes' nearest boundary\n// and try there, even if the original position wasn't directly at the\n// start or end of that node. Returns null when no position was found.\nexport function dropPoint(doc, pos, slice) {\n  let $pos = doc.resolve(pos)\n  if (!slice.content.size) return pos\n  let content = slice.content\n  for (let i = 0; i < slice.openStart; i++) content = content.firstChild.content\n  for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n    for (let d = $pos.depth; d >= 0; d--) {\n      let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1\n      let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0)\n      let parent = $pos.node(d), fits = false\n      if (pass == 1) {\n        fits = parent.canReplace(insertPos, insertPos, content)\n      } else {\n        let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type)\n        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0])\n      }\n      if (fits)\n        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1)\n    }\n  }\n  return null\n}\n","import {Fragment, Slice} from \"prosemirror-model\"\nimport {Step, StepResult} from \"./step\"\n\nfunction mapFragment(fragment, f, parent) {\n  let mapped = []\n  for (let i = 0; i < fragment.childCount; i++) {\n    let child = fragment.child(i)\n    if (child.content.size) child = child.copy(mapFragment(child.content, f, child))\n    if (child.isInline) child = f(child, parent, i)\n    mapped.push(child)\n  }\n  return Fragment.fromArray(mapped)\n}\n\n// ::- Add a mark to all inline content between two positions.\nexport class AddMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the marked range.\n    this.from = from\n    // :: number\n    // The end of the marked range.\n    this.to = to\n    // :: Mark\n    // The mark to add.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from)\n    let parent = $from.node($from.sharedDepth(this.to))\n    let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {\n      if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type)) return node\n      return node.mark(this.mark.addToSet(node.marks))\n    }, parent), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new RemoveMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new AddMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof AddMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new AddMarkStep(Math.min(this.from, other.from),\n                             Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"addMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\")\n    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"addMark\", AddMarkStep)\n\n// ::- Remove a mark from all inline content between two positions.\nexport class RemoveMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the unmarked range.\n    this.from = from\n    // :: number\n    // The end of the unmarked range.\n    this.to = to\n    // :: Mark\n    // The mark to remove.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to)\n    let slice = new Slice(mapFragment(oldSlice.content, node => {\n      return node.mark(this.mark.removeFromSet(node.marks))\n    }), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new AddMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new RemoveMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof RemoveMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new RemoveMarkStep(Math.min(this.from, other.from),\n                                Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"removeMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\")\n    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"removeMark\", RemoveMarkStep)\n","import {MarkType, Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {AddMarkStep, RemoveMarkStep} from \"./mark_step\"\nimport {ReplaceStep} from \"./replace_step\"\n\n// :: (number, number, Mark) → this\n// Add the given mark to the inline content between `from` and `to`.\nTransform.prototype.addMark = function(from, to, mark) {\n  let removed = [], added = [], removing = null, adding = null\n  this.doc.nodesBetween(from, to, (node, pos, parent) => {\n    if (!node.isInline) return\n    let marks = node.marks\n    if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n      let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to)\n      let newSet = mark.addToSet(marks)\n\n      for (let i = 0; i < marks.length; i++) {\n        if (!marks[i].isInSet(newSet)) {\n          if (removing && removing.to == start && removing.mark.eq(marks[i]))\n            removing.to = end\n          else\n            removed.push(removing = new RemoveMarkStep(start, end, marks[i]))\n        }\n      }\n\n      if (adding && adding.to == start)\n        adding.to = end\n      else\n        added.push(adding = new AddMarkStep(start, end, mark))\n    }\n  })\n\n  removed.forEach(s => this.step(s))\n  added.forEach(s => this.step(s))\n  return this\n}\n\n// :: (number, number, ?union<Mark, MarkType>) → this\n// Remove marks from inline nodes between `from` and `to`. When `mark`\n// is a single mark, remove precisely that mark. When it is a mark type,\n// remove all marks of that type. When it is null, remove all marks of\n// any type.\nTransform.prototype.removeMark = function(from, to, mark = null) {\n  let matched = [], step = 0\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isInline) return\n    step++\n    let toRemove = null\n    if (mark instanceof MarkType) {\n      let set = node.marks, found\n      while (found = mark.isInSet(set)) {\n        ;(toRemove || (toRemove = [])).push(found)\n        set = found.removeFromSet(set)\n      }\n    } else if (mark) {\n      if (mark.isInSet(node.marks)) toRemove = [mark]\n    } else {\n      toRemove = node.marks\n    }\n    if (toRemove && toRemove.length) {\n      let end = Math.min(pos + node.nodeSize, to)\n      for (let i = 0; i < toRemove.length; i++) {\n        let style = toRemove[i], found\n        for (let j = 0; j < matched.length; j++) {\n          let m = matched[j]\n          if (m.step == step - 1 && style.eq(matched[j].style)) found = m\n        }\n        if (found) {\n          found.to = end\n          found.step = step\n        } else {\n          matched.push({style, from: Math.max(pos, from), to: end, step})\n        }\n      }\n    }\n  })\n  matched.forEach(m => this.step(new RemoveMarkStep(m.from, m.to, m.style)))\n  return this\n}\n\n// :: (number, NodeType, ?ContentMatch) → this\n// Removes all marks and nodes from the content of the node at `pos`\n// that don't match the given new parent node type. Accepts an\n// optional starting [content match](#model.ContentMatch) as third\n// argument.\nTransform.prototype.clearIncompatible = function(pos, parentType, match = parentType.contentMatch) {\n  let node = this.doc.nodeAt(pos)\n  let delSteps = [], cur = pos + 1\n  for (let i = 0; i < node.childCount; i++) {\n    let child = node.child(i), end = cur + child.nodeSize\n    let allowed = match.matchType(child.type, child.attrs)\n    if (!allowed) {\n      delSteps.push(new ReplaceStep(cur, end, Slice.empty))\n    } else {\n      match = allowed\n      for (let j = 0; j < child.marks.length; j++) if (!parentType.allowsMarkType(child.marks[j].type))\n        this.step(new RemoveMarkStep(cur, end, child.marks[j]))\n    }\n    cur = end\n  }\n  if (!match.validEnd) {\n    let fill = match.fillBefore(Fragment.empty, true)\n    this.replace(cur, cur, new Slice(fill, 0, 0))\n  }\n  for (let i = delSteps.length - 1; i >= 0; i--) this.step(delSteps[i])\n  return this\n}\n","import {Fragment, Slice} from \"prosemirror-model\"\n\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\nimport {Transform} from \"./transform\"\nimport {insertPoint} from \"./structure\"\n\n// :: (Node, number, ?number, ?Slice) → ?Step\n// ‘Fit’ a slice into a given position in the document, producing a\n// [step](#transform.Step) that inserts it. Will return null if\n// there's no meaningful way to insert the slice here, or inserting it\n// would be a no-op (an empty slice over an empty range).\nexport function replaceStep(doc, from, to = from, slice = Slice.empty) {\n  if (from == to && !slice.size) return null\n\n  let $from = doc.resolve(from), $to = doc.resolve(to)\n  // Optimization -- avoid work if it's obvious that it's not needed.\n  if (fitsTrivially($from, $to, slice)) return new ReplaceStep(from, to, slice)\n  return new Fitter($from, $to, slice).fit()\n}\n\n// :: (number, ?number, ?Slice) → this\n// Replace the part of the document between `from` and `to` with the\n// given `slice`.\nTransform.prototype.replace = function(from, to = from, slice = Slice.empty) {\n  let step = replaceStep(this.doc, from, to, slice)\n  if (step) this.step(step)\n  return this\n}\n\n// :: (number, number, union<Fragment, Node, [Node]>) → this\n// Replace the given range with the given content, which may be a\n// fragment, node, or array of nodes.\nTransform.prototype.replaceWith = function(from, to, content) {\n  return this.replace(from, to, new Slice(Fragment.from(content), 0, 0))\n}\n\n// :: (number, number) → this\n// Delete the content between the given positions.\nTransform.prototype.delete = function(from, to) {\n  return this.replace(from, to, Slice.empty)\n}\n\n// :: (number, union<Fragment, Node, [Node]>) → this\n// Insert the given content at the given position.\nTransform.prototype.insert = function(pos, content) {\n  return this.replaceWith(pos, pos, content)\n}\n\nfunction fitsTrivially($from, $to, slice) {\n  return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&\n    $from.parent.canReplace($from.index(), $to.index(), slice.content)\n}\n\n// Algorithm for 'placing' the elements of a slice into a gap:\n//\n// We consider the content of each node that is open to the left to be\n// independently placeable. I.e. in <p(\"foo\"), p(\"bar\")>, when the\n// paragraph on the left is open, \"foo\" can be placed (somewhere on\n// the left side of the replacement gap) independently from p(\"bar\").\n//\n// This class tracks the state of the placement progress in the\n// following properties:\n//\n//  - `frontier` holds a stack of `{type, match}` objects that\n//    represent the open side of the replacement. It starts at\n//    `$from`, then moves forward as content is placed, and is finally\n//    reconciled with `$to`.\n//\n//  - `unplaced` is a slice that represents the content that hasn't\n//    been placed yet.\n//\n//  - `placed` is a fragment of placed content. Its open-start value\n//    is implicit in `$from`, and its open-end value in `frontier`.\nclass Fitter {\n  constructor($from, $to, slice) {\n    this.$to = $to\n    this.$from = $from\n    this.unplaced = slice\n\n    this.frontier = []\n    for (let i = 0; i <= $from.depth; i++) {\n      let node = $from.node(i)\n      this.frontier.push({\n        type: node.type,\n        match: node.contentMatchAt($from.indexAfter(i))\n      })\n    }\n\n    this.placed = Fragment.empty\n    for (let i = $from.depth; i > 0; i--)\n      this.placed = Fragment.from($from.node(i).copy(this.placed))\n  }\n\n  get depth() { return this.frontier.length - 1 }\n\n  fit() {\n    // As long as there's unplaced content, try to place some of it.\n    // If that fails, either increase the open score of the unplaced\n    // slice, or drop nodes from it, and then try again.\n    while (this.unplaced.size) {\n      let fit = this.findFittable()\n      if (fit) this.placeNodes(fit)\n      else this.openMore() || this.dropNode()\n    }\n    // When there's inline content directly after the frontier _and_\n    // directly after `this.$to`, we must generate a `ReplaceAround`\n    // step that pulls that content into the node after the frontier.\n    // That means the fitting must be done to the end of the textblock\n    // node after `this.$to`, not `this.$to` itself.\n    let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth\n    let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline))\n    if (!$to) return null\n\n    // If closing to `$to` succeeded, create a step\n    let content = this.placed, openStart = $from.depth, openEnd = $to.depth\n    while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes\n      content = content.firstChild.content\n      openStart--; openEnd--\n    }\n    let slice = new Slice(content, openStart, openEnd)\n    if (moveInline > -1)\n      return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize)\n    if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps\n      return new ReplaceStep($from.pos, $to.pos, slice)\n  }\n\n  // Find a position on the start spine of `this.unplaced` that has\n  // content that can be moved somewhere on the frontier. Returns two\n  // depths, one for the slice and one for the frontier.\n  findFittable() {\n    // Only try wrapping nodes (pass 2) after finding a place without\n    // wrapping failed.\n    for (let pass = 1; pass <= 2; pass++) {\n      for (let sliceDepth = this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {\n        let fragment, parent\n        if (sliceDepth) {\n          parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild\n          fragment = parent.content\n        } else {\n          fragment = this.unplaced.content\n        }\n        let first = fragment.firstChild\n        for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {\n          let {type, match} = this.frontier[frontierDepth], wrap, inject\n          // In pass 1, if the next node matches, or there is no next\n          // node but the parents look compatible, we've found a\n          // place.\n          if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))\n                            : type.compatibleContent(parent.type)))\n            return {sliceDepth, frontierDepth, parent, inject}\n          // In pass 2, look for a set of wrapping nodes that make\n          // `first` fit here.\n          else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))\n            return {sliceDepth, frontierDepth, parent, wrap}\n          // Don't continue looking further up if the parent node\n          // would fit here.\n          if (parent && match.matchType(parent.type)) break\n        }\n      }\n    }\n  }\n\n  openMore() {\n    let {content, openStart, openEnd} = this.unplaced\n    let inner = contentAt(content, openStart)\n    if (!inner.childCount || inner.firstChild.isLeaf) return false\n    this.unplaced = new Slice(content, openStart + 1,\n                              Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0))\n    return true\n  }\n\n  dropNode() {\n    let {content, openStart, openEnd} = this.unplaced\n    let inner = contentAt(content, openStart)\n    if (inner.childCount <= 1 && openStart > 0) {\n      let openAtEnd = content.size - openStart <= openStart + inner.size\n      this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1,\n                                openAtEnd ? openStart - 1 : openEnd)\n    } else {\n      this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd)\n    }\n  }\n\n  // : ({sliceDepth: number, frontierDepth: number, parent: ?Node, wrap: ?[NodeType], inject: ?Fragment})\n  // Move content from the unplaced slice at `sliceDepth` to the\n  // frontier node at `frontierDepth`. Close that frontier node when\n  // applicable.\n  placeNodes({sliceDepth, frontierDepth, parent, inject, wrap}) {\n    while (this.depth > frontierDepth) this.closeFrontierNode()\n    if (wrap) for (let i = 0; i < wrap.length; i++) this.openFrontierNode(wrap[i])\n\n    let slice = this.unplaced, fragment = parent ? parent.content : slice.content\n    let openStart = slice.openStart - sliceDepth\n    let taken = 0, add = []\n    let {match, type} = this.frontier[frontierDepth]\n    if (inject) {\n      for (let i = 0; i < inject.childCount; i++) add.push(inject.child(i))\n      match = match.matchFragment(inject)\n    }\n    // Computes the amount of (end) open nodes at the end of the\n    // fragment. When 0, the parent is open, but no more. When\n    // negative, nothing is open.\n    let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd)\n    // Scan over the fragment, fitting as many child nodes as\n    // possible.\n    while (taken < fragment.childCount) {\n      let next = fragment.child(taken), matches = match.matchType(next.type)\n      if (!matches) break\n      taken++\n      if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes\n        match = matches\n        add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0,\n                                taken == fragment.childCount ? openEndCount : -1))\n      }\n    }\n    let toEnd = taken == fragment.childCount\n    if (!toEnd) openEndCount = -1\n\n    this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add))\n    this.frontier[frontierDepth].match = match\n\n    // If the parent types match, and the entire node was moved, and\n    // it's not open, close this frontier node right away.\n    if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)\n      this.closeFrontierNode()\n\n    // Add new frontier nodes for any open nodes at the end.\n    for (let i = 0, cur = fragment; i < openEndCount; i++) {\n      let node = cur.lastChild\n      this.frontier.push({type: node.type, match: node.contentMatchAt(node.childCount)})\n      cur = node.content\n    }\n\n    // Update `this.unplaced`. Drop the entire node from which we\n    // placed it we got to its end, otherwise just drop the placed\n    // nodes.\n    this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)\n      : sliceDepth == 0 ? Slice.empty\n      : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1),\n                  sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1)\n  }\n\n  mustMoveInline() {\n    if (!this.$to.parent.isTextblock || this.$to.end() == this.$to.pos) return -1\n    let top = this.frontier[this.depth], level\n    if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||\n        (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth)) return -1\n\n    let {depth} = this.$to, after = this.$to.after(depth)\n    while (depth > 1 && after == this.$to.end(--depth)) ++after\n    return after\n  }\n\n  findCloseLevel($to) {\n    scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {\n      let {match, type} = this.frontier[i]\n      let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1))\n      let fit = contentAfterFits($to, i, type, match, dropInner)\n      if (!fit) continue\n      for (let d = i - 1; d >= 0; d--) {\n        let {match, type} = this.frontier[d]\n        let matches = contentAfterFits($to, d, type, match, true)\n        if (!matches || matches.childCount) continue scan\n      }\n      return {depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to}\n    }\n  }\n\n  close($to) {\n    let close = this.findCloseLevel($to)\n    if (!close) return null\n\n    while (this.depth > close.depth) this.closeFrontierNode()\n    if (close.fit.childCount) this.placed = addToFragment(this.placed, close.depth, close.fit)\n    $to = close.move\n    for (let d = close.depth + 1; d <= $to.depth; d++) {\n      let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d))\n      this.openFrontierNode(node.type, node.attrs, add)\n    }\n    return $to\n  }\n\n  openFrontierNode(type, attrs, content) {\n    let top = this.frontier[this.depth]\n    top.match = top.match.matchType(type)\n    this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)))\n    this.frontier.push({type, match: type.contentMatch})\n  }\n\n  closeFrontierNode() {\n    let open = this.frontier.pop()\n    let add = open.match.fillBefore(Fragment.empty, true)\n    if (add.childCount) this.placed = addToFragment(this.placed, this.frontier.length, add)\n  }\n}\n\nfunction dropFromFragment(fragment, depth, count) {\n  if (depth == 0) return fragment.cutByIndex(count)\n  return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)))\n}\n\nfunction addToFragment(fragment, depth, content) {\n  if (depth == 0) return fragment.append(content)\n  return fragment.replaceChild(fragment.childCount - 1,\n                               fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)))\n}\n\nfunction contentAt(fragment, depth) {\n  for (let i = 0; i < depth; i++) fragment = fragment.firstChild.content\n  return fragment\n}\n\nfunction closeNodeStart(node, openStart, openEnd) {\n  if (openStart <= 0) return node\n  let frag = node.content\n  if (openStart > 1)\n    frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0))\n  if (openStart > 0) {\n    frag = node.type.contentMatch.fillBefore(frag).append(frag)\n    if (openEnd <= 0) frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true))\n  }\n  return node.copy(frag)\n}\n\nfunction contentAfterFits($to, depth, type, match, open) {\n  let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth)\n  if (index == node.childCount && !type.compatibleContent(node.type)) return null\n  let fit = match.fillBefore(node.content, true, index)\n  return fit && !invalidMarks(type, node.content, index) ? fit : null\n}\n\nfunction invalidMarks(type, fragment, start) {\n  for (let i = start; i < fragment.childCount; i++)\n    if (!type.allowsMarks(fragment.child(i).marks)) return true\n  return false\n}\n\n// :: (number, number, Slice) → this\n// Replace a range of the document with a given slice, using `from`,\n// `to`, and the slice's [`openStart`](#model.Slice.openStart) property\n// as hints, rather than fixed start and end points. This method may\n// grow the replaced area or close open nodes in the slice in order to\n// get a fit that is more in line with WYSIWYG expectations, by\n// dropping fully covered parent nodes of the replaced region when\n// they are marked [non-defining](#model.NodeSpec.defining), or\n// including an open parent node from the slice that _is_ marked as\n// [defining](#model.NodeSpec.defining).\n//\n// This is the method, for example, to handle paste. The similar\n// [`replace`](#transform.Transform.replace) method is a more\n// primitive tool which will _not_ move the start and end of its given\n// range, and is useful in situations where you need more precise\n// control over what happens.\nTransform.prototype.replaceRange = function(from, to, slice) {\n  if (!slice.size) return this.deleteRange(from, to)\n\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  if (fitsTrivially($from, $to, slice))\n    return this.step(new ReplaceStep(from, to, slice))\n\n  let targetDepths = coveredDepths($from, this.doc.resolve(to))\n  // Can't replace the whole document, so remove 0 if it's present\n  if (targetDepths[targetDepths.length - 1] == 0) targetDepths.pop()\n  // Negative numbers represent not expansion over the whole node at\n  // that depth, but replacing from $from.before(-D) to $to.pos.\n  let preferredTarget = -($from.depth + 1)\n  targetDepths.unshift(preferredTarget)\n  // This loop picks a preferred target depth, if one of the covering\n  // depths is not outside of a defining node, and adds negative\n  // depths for any depth that has $from at its start and does not\n  // cross a defining node.\n  for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {\n    let spec = $from.node(d).type.spec\n    if (spec.defining || spec.isolating) break\n    if (targetDepths.indexOf(d) > -1) preferredTarget = d\n    else if ($from.before(d) == pos) targetDepths.splice(1, 0, -d)\n  }\n  // Try to fit each possible depth of the slice into each possible\n  // target depth, starting with the preferred depths.\n  let preferredTargetIndex = targetDepths.indexOf(preferredTarget)\n\n  let leftNodes = [], preferredDepth = slice.openStart\n  for (let content = slice.content, i = 0;; i++) {\n    let node = content.firstChild\n    leftNodes.push(node)\n    if (i == slice.openStart) break\n    content = node.content\n  }\n  // Back up if the node directly above openStart, or the node above\n  // that separated only by a non-defining textblock node, is defining.\n  if (preferredDepth > 0 && leftNodes[preferredDepth - 1].type.spec.defining &&\n      $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 1].type)\n    preferredDepth -= 1\n  else if (preferredDepth >= 2 && leftNodes[preferredDepth - 1].isTextblock && leftNodes[preferredDepth - 2].type.spec.defining &&\n           $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 2].type)\n    preferredDepth -= 2\n\n  for (let j = slice.openStart; j >= 0; j--) {\n    let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1)\n    let insert = leftNodes[openDepth]\n    if (!insert) continue\n    for (let i = 0; i < targetDepths.length; i++) {\n      // Loop over possible expansion levels, starting with the\n      // preferred one\n      let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true\n      if (targetDepth < 0) { expand = false; targetDepth = -targetDepth }\n      let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1)\n      if (parent.canReplaceWith(index, index, insert.type, insert.marks))\n        return this.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to,\n                            new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth),\n                                      openDepth, slice.openEnd))\n    }\n  }\n\n  let startSteps = this.steps.length\n  for (let i = targetDepths.length - 1; i >= 0; i--) {\n    this.replace(from, to, slice)\n    if (this.steps.length > startSteps) break\n    let depth = targetDepths[i]\n    if (depth < 0) continue\n    from = $from.before(depth); to = $to.after(depth)\n  }\n  return this\n}\n\nfunction closeFragment(fragment, depth, oldOpen, newOpen, parent) {\n  if (depth < oldOpen) {\n    let first = fragment.firstChild\n    fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)))\n  }\n  if (depth > newOpen) {\n    let match = parent.contentMatchAt(0)\n    let start = match.fillBefore(fragment).append(fragment)\n    fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true))\n  }\n  return fragment\n}\n\n// :: (number, number, Node) → this\n// Replace the given range with a node, but use `from` and `to` as\n// hints, rather than precise positions. When from and to are the same\n// and are at the start or end of a parent node in which the given\n// node doesn't fit, this method may _move_ them out towards a parent\n// that does allow the given node to be placed. When the given range\n// completely covers a parent node, this method may completely replace\n// that parent node.\nTransform.prototype.replaceRangeWith = function(from, to, node) {\n  if (!node.isInline && from == to && this.doc.resolve(from).parent.content.size) {\n    let point = insertPoint(this.doc, from, node.type)\n    if (point != null) from = to = point\n  }\n  return this.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0))\n}\n\n// :: (number, number) → this\n// Delete the given range, expanding it to cover fully covered\n// parent nodes until a valid replace is found.\nTransform.prototype.deleteRange = function(from, to) {\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  let covered = coveredDepths($from, $to)\n  for (let i = 0; i < covered.length; i++) {\n    let depth = covered[i], last = i == covered.length - 1\n    if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)\n      return this.delete($from.start(depth), $to.end(depth))\n    if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))\n      return this.delete($from.before(depth), $to.after(depth))\n  }\n  for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {\n    if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)\n      return this.delete($from.before(d), to)\n  }\n  return this.delete(from, to)\n}\n\n// : (ResolvedPos, ResolvedPos) → [number]\n// Returns an array of all depths for which $from - $to spans the\n// whole content of the nodes at that depth.\nfunction coveredDepths($from, $to) {\n  let result = [], minDepth = Math.min($from.depth, $to.depth)\n  for (let d = minDepth; d >= 0; d--) {\n    let start = $from.start(d)\n    if (start < $from.pos - ($from.depth - d) ||\n        $to.end(d) > $to.pos + ($to.depth - d) ||\n        $from.node(d).type.spec.isolating ||\n        $to.node(d).type.spec.isolating) break\n    if (start == $to.start(d)) result.push(d)\n  }\n  return result\n}\n","import {Slice, Fragment} from \"prosemirror-model\"\nimport {ReplaceStep, ReplaceAroundStep} from \"prosemirror-transform\"\n\nconst classesById = Object.create(null)\n\n// ::- Superclass for editor selections. Every selection type should\n// extend this. Should not be instantiated directly.\nexport class Selection {\n  // :: (ResolvedPos, ResolvedPos, ?[SelectionRange])\n  // Initialize a selection with the head and anchor and ranges. If no\n  // ranges are given, constructs a single range across `$anchor` and\n  // `$head`.\n  constructor($anchor, $head, ranges) {\n    // :: [SelectionRange]\n    // The ranges covered by the selection.\n    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))]\n    // :: ResolvedPos\n    // The resolved anchor of the selection (the side that stays in\n    // place when the selection is modified).\n    this.$anchor = $anchor\n    // :: ResolvedPos\n    // The resolved head of the selection (the side that moves when\n    // the selection is modified).\n    this.$head = $head\n  }\n\n  // :: number\n  // The selection's anchor, as an unresolved position.\n  get anchor() { return this.$anchor.pos }\n\n  // :: number\n  // The selection's head.\n  get head() { return this.$head.pos }\n\n  // :: number\n  // The lower bound of the selection's main range.\n  get from() { return this.$from.pos }\n\n  // :: number\n  // The upper bound of the selection's main range.\n  get to() { return this.$to.pos }\n\n  // :: ResolvedPos\n  // The resolved lower  bound of the selection's main range.\n  get $from() {\n    return this.ranges[0].$from\n  }\n\n  // :: ResolvedPos\n  // The resolved upper bound of the selection's main range.\n  get $to() {\n    return this.ranges[0].$to\n  }\n\n  // :: bool\n  // Indicates whether the selection contains any content.\n  get empty() {\n    let ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++)\n      if (ranges[i].$from.pos != ranges[i].$to.pos) return false\n    return true\n  }\n\n  // eq:: (Selection) → bool\n  // Test whether the selection is the same as another selection.\n\n  // map:: (doc: Node, mapping: Mappable) → Selection\n  // Map this selection through a [mappable](#transform.Mappable) thing. `doc`\n  // should be the new document to which we are mapping.\n\n  // :: () → Slice\n  // Get the content of this selection as a slice.\n  content() {\n    return this.$from.node(0).slice(this.from, this.to, true)\n  }\n\n  // :: (Transaction, ?Slice)\n  // Replace the selection with a slice or, if no slice is given,\n  // delete the selection. Will append to the given transaction.\n  replace(tr, content = Slice.empty) {\n    // Put the new selection at the position after the inserted\n    // content. When that ended in an inline node, search backwards,\n    // to get the position after that node. If not, search forward.\n    let lastNode = content.content.lastChild, lastParent = null\n    for (let i = 0; i < content.openEnd; i++) {\n      lastParent = lastNode\n      lastNode = lastNode.lastChild\n    }\n\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content)\n      if (i == 0)\n        selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1)\n    }\n  }\n\n  // :: (Transaction, Node)\n  // Replace the selection with the given node, appending the changes\n  // to the given transaction.\n  replaceWith(tr, node) {\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      let from = mapping.map($from.pos), to = mapping.map($to.pos)\n      if (i) {\n        tr.deleteRange(from, to)\n      } else {\n        tr.replaceRangeWith(from, to, node)\n        selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1)\n      }\n    }\n  }\n\n  // toJSON:: () → Object\n  // Convert the selection to a JSON representation. When implementing\n  // this for a custom selection class, make sure to give the object a\n  // `type` property whose value matches the ID under which you\n  // [registered](#state.Selection^jsonID) your class.\n\n  // :: (ResolvedPos, number, ?bool) → ?Selection\n  // Find a valid cursor or leaf node selection starting at the given\n  // position and searching back if `dir` is negative, and forward if\n  // positive. When `textOnly` is true, only consider cursor\n  // selections. Will return null when no valid selection position is\n  // found.\n  static findFrom($pos, dir, textOnly) {\n    let inner = $pos.parent.inlineContent ? new TextSelection($pos)\n        : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly)\n    if (inner) return inner\n\n    for (let depth = $pos.depth - 1; depth >= 0; depth--) {\n      let found = dir < 0\n          ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)\n          : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly)\n      if (found) return found\n    }\n  }\n\n  // :: (ResolvedPos, ?number) → Selection\n  // Find a valid cursor or leaf node selection near the given\n  // position. Searches forward first by default, but if `bias` is\n  // negative, it will search backwards first.\n  static near($pos, bias = 1) {\n    return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0))\n  }\n\n  // :: (Node) → Selection\n  // Find the cursor or leaf node selection closest to the start of\n  // the given document. Will return an\n  // [`AllSelection`](#state.AllSelection) if no valid position\n  // exists.\n  static atStart(doc) {\n    return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc)\n  }\n\n  // :: (Node) → Selection\n  // Find the cursor or leaf node selection closest to the end of the\n  // given document.\n  static atEnd(doc) {\n    return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc)\n  }\n\n  // :: (Node, Object) → Selection\n  // Deserialize the JSON representation of a selection. Must be\n  // implemented for custom classes (as a static class method).\n  static fromJSON(doc, json) {\n    if (!json || !json.type) throw new RangeError(\"Invalid input for Selection.fromJSON\")\n    let cls = classesById[json.type]\n    if (!cls) throw new RangeError(`No selection type ${json.type} defined`)\n    return cls.fromJSON(doc, json)\n  }\n\n  // :: (string, constructor<Selection>)\n  // To be able to deserialize selections from JSON, custom selection\n  // classes must register themselves with an ID string, so that they\n  // can be disambiguated. Try to pick something that's unlikely to\n  // clash with classes from other modules.\n  static jsonID(id, selectionClass) {\n    if (id in classesById) throw new RangeError(\"Duplicate use of selection JSON ID \" + id)\n    classesById[id] = selectionClass\n    selectionClass.prototype.jsonID = id\n    return selectionClass\n  }\n\n  // :: () → SelectionBookmark\n  // Get a [bookmark](#state.SelectionBookmark) for this selection,\n  // which is a value that can be mapped without having access to a\n  // current document, and later resolved to a real selection for a\n  // given document again. (This is used mostly by the history to\n  // track and restore old selections.) The default implementation of\n  // this method just converts the selection to a text selection and\n  // returns the bookmark for that.\n  getBookmark() {\n    return TextSelection.between(this.$anchor, this.$head).getBookmark()\n  }\n}\n\n// :: bool\n// Controls whether, when a selection of this type is active in the\n// browser, the selected range should be visible to the user. Defaults\n// to `true`.\nSelection.prototype.visible = true\n\n// SelectionBookmark:: interface\n// A lightweight, document-independent representation of a selection.\n// You can define a custom bookmark type for a custom selection class\n// to make the history handle it well.\n//\n//   map:: (mapping: Mapping) → SelectionBookmark\n//   Map the bookmark through a set of changes.\n//\n//   resolve:: (doc: Node) → Selection\n//   Resolve the bookmark to a real selection again. This may need to\n//   do some error checking and may fall back to a default (usually\n//   [`TextSelection.between`](#state.TextSelection^between)) if\n//   mapping made the bookmark invalid.\n\n// ::- Represents a selected range in a document.\nexport class SelectionRange {\n  // :: (ResolvedPos, ResolvedPos)\n  constructor($from, $to) {\n    // :: ResolvedPos\n    // The lower bound of the range.\n    this.$from = $from\n    // :: ResolvedPos\n    // The upper bound of the range.\n    this.$to = $to\n  }\n}\n\n// ::- A text selection represents a classical editor selection, with\n// a head (the moving side) and anchor (immobile side), both of which\n// point into textblock nodes. It can be empty (a regular cursor\n// position).\nexport class TextSelection extends Selection {\n  // :: (ResolvedPos, ?ResolvedPos)\n  // Construct a text selection between the given points.\n  constructor($anchor, $head = $anchor) {\n    super($anchor, $head)\n  }\n\n  // :: ?ResolvedPos\n  // Returns a resolved position if this is a cursor selection (an\n  // empty text selection), and null otherwise.\n  get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null }\n\n  map(doc, mapping) {\n    let $head = doc.resolve(mapping.map(this.head))\n    if (!$head.parent.inlineContent) return Selection.near($head)\n    let $anchor = doc.resolve(mapping.map(this.anchor))\n    return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head)\n  }\n\n  replace(tr, content = Slice.empty) {\n    super.replace(tr, content)\n    if (content == Slice.empty) {\n      let marks = this.$from.marksAcross(this.$to)\n      if (marks) tr.ensureMarks(marks)\n    }\n  }\n\n  eq(other) {\n    return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head\n  }\n\n  getBookmark() {\n    return new TextBookmark(this.anchor, this.head)\n  }\n\n  toJSON() {\n    return {type: \"text\", anchor: this.anchor, head: this.head}\n  }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\" || typeof json.head != \"number\")\n      throw new RangeError(\"Invalid input for TextSelection.fromJSON\")\n    return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head))\n  }\n\n  // :: (Node, number, ?number) → TextSelection\n  // Create a text selection from non-resolved positions.\n  static create(doc, anchor, head = anchor) {\n    let $anchor = doc.resolve(anchor)\n    return new this($anchor, head == anchor ? $anchor : doc.resolve(head))\n  }\n\n  // :: (ResolvedPos, ResolvedPos, ?number) → Selection\n  // Return a text selection that spans the given positions or, if\n  // they aren't text positions, find a text selection near them.\n  // `bias` determines whether the method searches forward (default)\n  // or backwards (negative number) first. Will fall back to calling\n  // [`Selection.near`](#state.Selection^near) when the document\n  // doesn't contain a valid text position.\n  static between($anchor, $head, bias) {\n    let dPos = $anchor.pos - $head.pos\n    if (!bias || dPos) bias = dPos >= 0 ? 1 : -1\n    if (!$head.parent.inlineContent) {\n      let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true)\n      if (found) $head = found.$head\n      else return Selection.near($head, bias)\n    }\n    if (!$anchor.parent.inlineContent) {\n      if (dPos == 0) {\n        $anchor = $head\n      } else {\n        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor\n        if (($anchor.pos < $head.pos) != (dPos < 0)) $anchor = $head\n      }\n    }\n    return new TextSelection($anchor, $head)\n  }\n}\n\nSelection.jsonID(\"text\", TextSelection)\n\nclass TextBookmark {\n  constructor(anchor, head) {\n    this.anchor = anchor\n    this.head = head\n  }\n  map(mapping) {\n    return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head))\n  }\n  resolve(doc) {\n    return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head))\n  }\n}\n\n// ::- A node selection is a selection that points at a single node.\n// All nodes marked [selectable](#model.NodeSpec.selectable) can be\n// the target of a node selection. In such a selection, `from` and\n// `to` point directly before and after the selected node, `anchor`\n// equals `from`, and `head` equals `to`..\nexport class NodeSelection extends Selection {\n  // :: (ResolvedPos)\n  // Create a node selection. Does not verify the validity of its\n  // argument.\n  constructor($pos) {\n    let node = $pos.nodeAfter\n    let $end = $pos.node(0).resolve($pos.pos + node.nodeSize)\n    super($pos, $end)\n    // :: Node The selected node.\n    this.node = node\n  }\n\n  map(doc, mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    let $pos = doc.resolve(pos)\n    if (deleted) return Selection.near($pos)\n    return new NodeSelection($pos)\n  }\n\n  content() {\n    return new Slice(Fragment.from(this.node), 0, 0)\n  }\n\n  eq(other) {\n    return other instanceof NodeSelection && other.anchor == this.anchor\n  }\n\n  toJSON() {\n    return {type: \"node\", anchor: this.anchor}\n  }\n\n  getBookmark() { return new NodeBookmark(this.anchor) }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\")\n      throw new RangeError(\"Invalid input for NodeSelection.fromJSON\")\n    return new NodeSelection(doc.resolve(json.anchor))\n  }\n\n  // :: (Node, number) → NodeSelection\n  // Create a node selection from non-resolved positions.\n  static create(doc, from) {\n    return new this(doc.resolve(from))\n  }\n\n  // :: (Node) → bool\n  // Determines whether the given node may be selected as a node\n  // selection.\n  static isSelectable(node) {\n    return !node.isText && node.type.spec.selectable !== false\n  }\n}\n\nNodeSelection.prototype.visible = false\n\nSelection.jsonID(\"node\", NodeSelection)\n\nclass NodeBookmark {\n  constructor(anchor) {\n    this.anchor = anchor\n  }\n  map(mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos)\n  }\n  resolve(doc) {\n    let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter\n    if (node && NodeSelection.isSelectable(node)) return new NodeSelection($pos)\n    return Selection.near($pos)\n  }\n}\n\n// ::- A selection type that represents selecting the whole document\n// (which can not necessarily be expressed with a text selection, when\n// there are for example leaf block nodes at the start or end of the\n// document).\nexport class AllSelection extends Selection {\n  // :: (Node)\n  // Create an all-selection over the given document.\n  constructor(doc) {\n    super(doc.resolve(0), doc.resolve(doc.content.size))\n  }\n\n  replace(tr, content = Slice.empty) {\n    if (content == Slice.empty) {\n      tr.delete(0, tr.doc.content.size)\n      let sel = Selection.atStart(tr.doc)\n      if (!sel.eq(tr.selection)) tr.setSelection(sel)\n    } else {\n      super.replace(tr, content)\n    }\n  }\n\n  toJSON() { return {type: \"all\"} }\n\n  static fromJSON(doc) { return new AllSelection(doc) }\n\n  map(doc) { return new AllSelection(doc) }\n\n  eq(other) { return other instanceof AllSelection }\n\n  getBookmark() { return AllBookmark }\n}\n\nSelection.jsonID(\"all\", AllSelection)\n\nconst AllBookmark = {\n  map() { return this },\n  resolve(doc) { return new AllSelection(doc) }\n}\n\n// FIXME we'll need some awareness of text direction when scanning for selections\n\n// Try to find a selection inside the given node. `pos` points at the\n// position where the search starts. When `text` is true, only return\n// text selections.\nfunction findSelectionIn(doc, node, pos, index, dir, text) {\n  if (node.inlineContent) return TextSelection.create(doc, pos)\n  for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n    let child = node.child(i)\n    if (!child.isAtom) {\n      let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text)\n      if (inner) return inner\n    } else if (!text && NodeSelection.isSelectable(child)) {\n      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0))\n    }\n    pos += child.nodeSize * dir\n  }\n}\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  let last = tr.steps.length - 1\n  if (last < startLen) return\n  let step = tr.steps[last]\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) return\n  let map = tr.mapping.maps[last], end\n  map.forEach((_from, _to, _newFrom, newTo) => { if (end == null) end = newTo })\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n","import {Transform} from \"prosemirror-transform\"\nimport {Mark} from \"prosemirror-model\"\nimport {Selection} from \"./selection\"\n\nconst UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4\n\n// ::- An editor state transaction, which can be applied to a state to\n// create an updated state. Use\n// [`EditorState.tr`](#state.EditorState.tr) to create an instance.\n//\n// Transactions track changes to the document (they are a subclass of\n// [`Transform`](#transform.Transform)), but also other state changes,\n// like selection updates and adjustments of the set of [stored\n// marks](#state.EditorState.storedMarks). In addition, you can store\n// metadata properties in a transaction, which are extra pieces of\n// information that client code or plugins can use to describe what a\n// transacion represents, so that they can update their [own\n// state](#state.StateField) accordingly.\n//\n// The [editor view](#view.EditorView) uses a few metadata properties:\n// it will attach a property `\"pointer\"` with the value `true` to\n// selection transactions directly caused by mouse or touch input, and\n// a `\"uiEvent\"` property of that may be `\"paste\"`, `\"cut\"`, or `\"drop\"`.\nexport class Transaction extends Transform {\n  constructor(state) {\n    super(state.doc)\n    // :: number\n    // The timestamp associated with this transaction, in the same\n    // format as `Date.now()`.\n    this.time = Date.now()\n    this.curSelection = state.selection\n    // The step count for which the current selection is valid.\n    this.curSelectionFor = 0\n    // :: ?[Mark]\n    // The stored marks set by this transaction, if any.\n    this.storedMarks = state.storedMarks\n    // Bitfield to track which aspects of the state were updated by\n    // this transaction.\n    this.updated = 0\n    // Object used to store metadata properties for the transaction.\n    this.meta = Object.create(null)\n  }\n\n  // :: Selection\n  // The transaction's current selection. This defaults to the editor\n  // selection [mapped](#state.Selection.map) through the steps in the\n  // transaction, but can be overwritten with\n  // [`setSelection`](#state.Transaction.setSelection).\n  get selection() {\n    if (this.curSelectionFor < this.steps.length) {\n      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor))\n      this.curSelectionFor = this.steps.length\n    }\n    return this.curSelection\n  }\n\n  // :: (Selection) → Transaction\n  // Update the transaction's current selection. Will determine the\n  // selection that the editor gets when the transaction is applied.\n  setSelection(selection) {\n    if (selection.$from.doc != this.doc)\n      throw new RangeError(\"Selection passed to setSelection must point at the current document\")\n    this.curSelection = selection\n    this.curSelectionFor = this.steps.length\n    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS\n    this.storedMarks = null\n    return this\n  }\n\n  // :: bool\n  // Whether the selection was explicitly updated by this transaction.\n  get selectionSet() {\n    return (this.updated & UPDATED_SEL) > 0\n  }\n\n  // :: (?[Mark]) → Transaction\n  // Set the current stored marks.\n  setStoredMarks(marks) {\n    this.storedMarks = marks\n    this.updated |= UPDATED_MARKS\n    return this\n  }\n\n  // :: ([Mark]) → Transaction\n  // Make sure the current stored marks or, if that is null, the marks\n  // at the selection, match the given set of marks. Does nothing if\n  // this is already the case.\n  ensureMarks(marks) {\n    if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))\n      this.setStoredMarks(marks)\n    return this\n  }\n\n  // :: (Mark) → Transaction\n  // Add a mark to the set of stored marks.\n  addStoredMark(mark) {\n    return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: (union<Mark, MarkType>) → Transaction\n  // Remove a mark or mark type from the set of stored marks.\n  removeStoredMark(mark) {\n    return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: bool\n  // Whether the stored marks were explicitly set for this transaction.\n  get storedMarksSet() {\n    return (this.updated & UPDATED_MARKS) > 0\n  }\n\n  addStep(step, doc) {\n    super.addStep(step, doc)\n    this.updated = this.updated & ~UPDATED_MARKS\n    this.storedMarks = null\n  }\n\n  // :: (number) → Transaction\n  // Update the timestamp for the transaction.\n  setTime(time) {\n    this.time = time\n    return this\n  }\n\n  // :: (Slice) → Transaction\n  // Replace the current selection with the given slice.\n  replaceSelection(slice) {\n    this.selection.replace(this, slice)\n    return this\n  }\n\n  // :: (Node, ?bool) → Transaction\n  // Replace the selection with the given node. When `inheritMarks` is\n  // true and the content is inline, it inherits the marks from the\n  // place where it is inserted.\n  replaceSelectionWith(node, inheritMarks) {\n    let selection = this.selection\n    if (inheritMarks !== false)\n      node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)))\n    selection.replaceWith(this, node)\n    return this\n  }\n\n  // :: () → Transaction\n  // Delete the selection.\n  deleteSelection() {\n    this.selection.replace(this)\n    return this\n  }\n\n  // :: (string, from: ?number, to: ?number) → Transaction\n  // Replace the given range, or the selection if no range is given,\n  // with a text node containing the given string.\n  insertText(text, from, to = from) {\n    let schema = this.doc.type.schema\n    if (from == null) {\n      if (!text) return this.deleteSelection()\n      return this.replaceSelectionWith(schema.text(text), true)\n    } else {\n      if (!text) return this.deleteRange(from, to)\n      let marks = this.storedMarks\n      if (!marks) {\n        let $from = this.doc.resolve(from)\n        marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to))\n      }\n      this.replaceRangeWith(from, to, schema.text(text, marks))\n      if (!this.selection.empty) this.setSelection(Selection.near(this.selection.$to))\n      return this\n    }\n  }\n\n  // :: (union<string, Plugin, PluginKey>, any) → Transaction\n  // Store a metadata property in this transaction, keyed either by\n  // name or by plugin.\n  setMeta(key, value) {\n    this.meta[typeof key == \"string\" ? key : key.key] = value\n    return this\n  }\n\n  // :: (union<string, Plugin, PluginKey>) → any\n  // Retrieve a metadata property for a given name or plugin.\n  getMeta(key) {\n    return this.meta[typeof key == \"string\" ? key : key.key]\n  }\n\n  // :: bool\n  // Returns true if this transaction doesn't contain any metadata,\n  // and can thus safely be extended.\n  get isGeneric() {\n    for (let _ in this.meta) return false\n    return true\n  }\n\n  // :: () → Transaction\n  // Indicate that the editor should scroll the selection into view\n  // when updated to the state produced by this transaction.\n  scrollIntoView() {\n    this.updated |= UPDATED_SCROLL\n    return this\n  }\n\n  get scrolledIntoView() {\n    return (this.updated & UPDATED_SCROLL) > 0\n  }\n}\n","import {Node} from \"prosemirror-model\"\n\nimport {Selection} from \"./selection\"\nimport {Transaction} from \"./transaction\"\n\nfunction bind(f, self) {\n  return !self || !f ? f : f.bind(self)\n}\n\nclass FieldDesc {\n  constructor(name, desc, self) {\n    this.name = name\n    this.init = bind(desc.init, self)\n    this.apply = bind(desc.apply, self)\n  }\n}\n\nconst baseFields = [\n  new FieldDesc(\"doc\", {\n    init(config) { return config.doc || config.schema.topNodeType.createAndFill() },\n    apply(tr) { return tr.doc }\n  }),\n\n  new FieldDesc(\"selection\", {\n    init(config, instance) { return config.selection || Selection.atStart(instance.doc) },\n    apply(tr) { return tr.selection }\n  }),\n\n  new FieldDesc(\"storedMarks\", {\n    init(config) { return config.storedMarks || null },\n    apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null }\n  }),\n\n  new FieldDesc(\"scrollToSelection\", {\n    init() { return 0 },\n    apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev }\n  })\n]\n\n// Object wrapping the part of a state object that stays the same\n// across transactions. Stored in the state's `config` property.\nclass Configuration {\n  constructor(schema, plugins) {\n    this.schema = schema\n    this.fields = baseFields.concat()\n    this.plugins = []\n    this.pluginsByKey = Object.create(null)\n    if (plugins) plugins.forEach(plugin => {\n      if (this.pluginsByKey[plugin.key])\n        throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\")\n      this.plugins.push(plugin)\n      this.pluginsByKey[plugin.key] = plugin\n      if (plugin.spec.state)\n        this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin))\n    })\n  }\n}\n\n// ::- The state of a ProseMirror editor is represented by an object\n// of this type. A state is a persistent data structure—it isn't\n// updated, but rather a new state value is computed from an old one\n// using the [`apply`](#state.EditorState.apply) method.\n//\n// A state holds a number of built-in fields, and plugins can\n// [define](#state.PluginSpec.state) additional fields.\nexport class EditorState {\n  constructor(config) {\n    this.config = config\n  }\n\n  // doc:: Node\n  // The current document.\n\n  // selection:: Selection\n  // The selection.\n\n  // storedMarks:: ?[Mark]\n  // A set of marks to apply to the next input. Will be null when\n  // no explicit marks have been set.\n\n  // :: Schema\n  // The schema of the state's document.\n  get schema() {\n    return this.config.schema\n  }\n\n  // :: [Plugin]\n  // The plugins that are active in this state.\n  get plugins() {\n    return this.config.plugins\n  }\n\n  // :: (Transaction) → EditorState\n  // Apply the given transaction to produce a new state.\n  apply(tr) {\n    return this.applyTransaction(tr).state\n  }\n\n  // : (Transaction) → bool\n  filterTransaction(tr, ignore = -1) {\n    for (let i = 0; i < this.config.plugins.length; i++) if (i != ignore) {\n      let plugin = this.config.plugins[i]\n      if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))\n        return false\n    }\n    return true\n  }\n\n  // :: (Transaction) → {state: EditorState, transactions: [Transaction]}\n  // Verbose variant of [`apply`](#state.EditorState.apply) that\n  // returns the precise transactions that were applied (which might\n  // be influenced by the [transaction\n  // hooks](#state.PluginSpec.filterTransaction) of\n  // plugins) along with the new state.\n  applyTransaction(rootTr) {\n    if (!this.filterTransaction(rootTr)) return {state: this, transactions: []}\n\n    let trs = [rootTr], newState = this.applyInner(rootTr), seen = null\n    // This loop repeatedly gives plugins a chance to respond to\n    // transactions as new transactions are added, making sure to only\n    // pass the transactions the plugin did not see before.\n    outer: for (;;) {\n      let haveNew = false\n      for (let i = 0; i < this.config.plugins.length; i++) {\n        let plugin = this.config.plugins[i]\n        if (plugin.spec.appendTransaction) {\n          let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this\n          let tr = n < trs.length &&\n              plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState)\n          if (tr && newState.filterTransaction(tr, i)) {\n            tr.setMeta(\"appendedTransaction\", rootTr)\n            if (!seen) {\n              seen = []\n              for (let j = 0; j < this.config.plugins.length; j++)\n                seen.push(j < i ? {state: newState, n: trs.length} : {state: this, n: 0})\n            }\n            trs.push(tr)\n            newState = newState.applyInner(tr)\n            haveNew = true\n          }\n          if (seen) seen[i] = {state: newState, n: trs.length}\n        }\n      }\n      if (!haveNew) return {state: newState, transactions: trs}\n    }\n  }\n\n  // : (Transaction) → EditorState\n  applyInner(tr) {\n    if (!tr.before.eq(this.doc)) throw new RangeError(\"Applying a mismatched transaction\")\n    let newInstance = new EditorState(this.config), fields = this.config.fields\n    for (let i = 0; i < fields.length; i++) {\n      let field = fields[i]\n      newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance)\n    }\n    for (let i = 0; i < applyListeners.length; i++) applyListeners[i](this, tr, newInstance)\n    return newInstance\n  }\n\n  // :: Transaction\n  // Start a [transaction](#state.Transaction) from this state.\n  get tr() { return new Transaction(this) }\n\n  // :: (Object) → EditorState\n  // Create a new state.\n  //\n  //   config::- Configuration options. Must contain `schema` or `doc` (or both).\n  //\n  //      schema:: ?Schema\n  //      The schema to use (only relevant if no `doc` is specified).\n  //\n  //      doc:: ?Node\n  //      The starting document.\n  //\n  //      selection:: ?Selection\n  //      A valid selection in the document.\n  //\n  //      storedMarks:: ?[Mark]\n  //      The initial set of [stored marks](#state.EditorState.storedMarks).\n  //\n  //      plugins:: ?[Plugin]\n  //      The plugins that should be active in this state.\n  static create(config) {\n    let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins)\n    let instance = new EditorState($config)\n    for (let i = 0; i < $config.fields.length; i++)\n      instance[$config.fields[i].name] = $config.fields[i].init(config, instance)\n    return instance\n  }\n\n  // :: (Object) → EditorState\n  // Create a new state based on this one, but with an adjusted set of\n  // active plugins. State fields that exist in both sets of plugins\n  // are kept unchanged. Those that no longer exist are dropped, and\n  // those that are new are initialized using their\n  // [`init`](#state.StateField.init) method, passing in the new\n  // configuration object..\n  //\n  //   config::- configuration options\n  //\n  //     plugins:: [Plugin]\n  //     New set of active plugins.\n  reconfigure(config) {\n    let $config = new Configuration(this.schema, config.plugins)\n    let fields = $config.fields, instance = new EditorState($config)\n    for (let i = 0; i < fields.length; i++) {\n      let name = fields[i].name\n      instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance)\n    }\n    return instance\n  }\n\n  // :: (?union<Object<Plugin>, string, number>) → Object\n  // Serialize this state to JSON. If you want to serialize the state\n  // of plugins, pass an object mapping property names to use in the\n  // resulting JSON object to plugin objects. The argument may also be\n  // a string or number, in which case it is ignored, to support the\n  // way `JSON.stringify` calls `toString` methods.\n  toJSON(pluginFields) {\n    let result = {doc: this.doc.toJSON(), selection: this.selection.toJSON()}\n    if (this.storedMarks) result.storedMarks = this.storedMarks.map(m => m.toJSON())\n    if (pluginFields && typeof pluginFields == 'object') for (let prop in pluginFields) {\n      if (prop == \"doc\" || prop == \"selection\")\n        throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\")\n      let plugin = pluginFields[prop], state = plugin.spec.state\n      if (state && state.toJSON) result[prop] = state.toJSON.call(plugin, this[plugin.key])\n    }\n    return result\n  }\n\n  // :: (Object, Object, ?Object<Plugin>) → EditorState\n  // Deserialize a JSON representation of a state. `config` should\n  // have at least a `schema` field, and should contain array of\n  // plugins to initialize the state with. `pluginFields` can be used\n  // to deserialize the state of plugins, by associating plugin\n  // instances with the property names they use in the JSON object.\n  //\n  //   config::- configuration options\n  //\n  //     schema:: Schema\n  //     The schema to use.\n  //\n  //     plugins:: ?[Plugin]\n  //     The set of active plugins.\n  static fromJSON(config, json, pluginFields) {\n    if (!json) throw new RangeError(\"Invalid input for EditorState.fromJSON\")\n    if (!config.schema) throw new RangeError(\"Required config field 'schema' missing\")\n    let $config = new Configuration(config.schema, config.plugins)\n    let instance = new EditorState($config)\n    $config.fields.forEach(field => {\n      if (field.name == \"doc\") {\n        instance.doc = Node.fromJSON(config.schema, json.doc)\n      } else if (field.name == \"selection\") {\n        instance.selection = Selection.fromJSON(instance.doc, json.selection)\n      } else if (field.name == \"storedMarks\") {\n        if (json.storedMarks) instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON)\n      } else {\n        if (pluginFields) for (let prop in pluginFields) {\n          let plugin = pluginFields[prop], state = plugin.spec.state\n          if (plugin.key == field.name && state && state.fromJSON &&\n              Object.prototype.hasOwnProperty.call(json, prop)) {\n            // This field belongs to a plugin mapped to a JSON field, read it from there.\n            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance)\n            return\n          }\n        }\n        instance[field.name] = field.init(config, instance)\n      }\n    })\n    return instance\n  }\n\n  // Kludge to allow the view to track mappings between different\n  // instances of a state.\n  //\n  // FIXME this is no longer needed as of prosemirror-view 1.9.0,\n  // though due to backwards-compat we should probably keep it around\n  // for a while (if only as a no-op)\n  static addApplyListener(f) {\n    applyListeners.push(f)\n  }\n  static removeApplyListener(f) {\n    let found = applyListeners.indexOf(f)\n    if (found > -1) applyListeners.splice(found, 1)\n  }\n}\n\nconst applyListeners = []\n","// PluginSpec:: interface\n//\n// This is the type passed to the [`Plugin`](#state.Plugin)\n// constructor. It provides a definition for a plugin.\n//\n//   props:: ?EditorProps\n//   The [view props](#view.EditorProps) added by this plugin. Props\n//   that are functions will be bound to have the plugin instance as\n//   their `this` binding.\n//\n//   state:: ?StateField<any>\n//   Allows a plugin to define a [state field](#state.StateField), an\n//   extra slot in the state object in which it can keep its own data.\n//\n//   key:: ?PluginKey\n//   Can be used to make this a keyed plugin. You can have only one\n//   plugin with a given key in a given state, but it is possible to\n//   access the plugin's configuration and state through the key,\n//   without having access to the plugin instance object.\n//\n//   view:: ?(EditorView) → Object\n//   When the plugin needs to interact with the editor view, or\n//   set something up in the DOM, use this field. The function\n//   will be called when the plugin's state is associated with an\n//   editor view.\n//\n//     return::-\n//     Should return an object with the following optional\n//     properties:\n//\n//       update:: ?(view: EditorView, prevState: EditorState)\n//       Called whenever the view's state is updated.\n//\n//       destroy:: ?()\n//       Called when the view is destroyed or receives a state\n//       with different plugins.\n//\n//   filterTransaction:: ?(Transaction, EditorState) → bool\n//   When present, this will be called before a transaction is\n//   applied by the state, allowing the plugin to cancel it (by\n//   returning false).\n//\n//   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) → ?Transaction\n//   Allows the plugin to append another transaction to be applied\n//   after the given array of transactions. When another plugin\n//   appends a transaction after this was called, it is called again\n//   with the new state and new transactions—but only the new\n//   transactions, i.e. it won't be passed transactions that it\n//   already saw.\n\nfunction bindProps(obj, self, target) {\n  for (let prop in obj) {\n    let val = obj[prop]\n    if (val instanceof Function) val = val.bind(self)\n    else if (prop == \"handleDOMEvents\") val = bindProps(val, self, {})\n    target[prop] = val\n  }\n  return target\n}\n\n// ::- Plugins bundle functionality that can be added to an editor.\n// They are part of the [editor state](#state.EditorState) and\n// may influence that state and the view that contains it.\nexport class Plugin {\n  // :: (PluginSpec)\n  // Create a plugin.\n  constructor(spec) {\n    // :: EditorProps\n    // The [props](#view.EditorProps) exported by this plugin.\n    this.props = {}\n    if (spec.props) bindProps(spec.props, this, this.props)\n    // :: Object\n    // The plugin's [spec object](#state.PluginSpec).\n    this.spec = spec\n    this.key = spec.key ? spec.key.key : createKey(\"plugin\")\n  }\n\n  // :: (EditorState) → any\n  // Extract the plugin's state field from an editor state.\n  getState(state) { return state[this.key] }\n}\n\n// StateField:: interface<T>\n// A plugin spec may provide a state field (under its\n// [`state`](#state.PluginSpec.state) property) of this type, which\n// describes the state it wants to keep. Functions provided here are\n// always called with the plugin instance as their `this` binding.\n//\n//   init:: (config: Object, instance: EditorState) → T\n//   Initialize the value of the field. `config` will be the object\n//   passed to [`EditorState.create`](#state.EditorState^create). Note\n//   that `instance` is a half-initialized state instance, and will\n//   not have values for plugin fields initialized after this one.\n//\n//   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) → T\n//   Apply the given transaction to this state field, producing a new\n//   field value. Note that the `newState` argument is again a partially\n//   constructed state does not yet contain the state from plugins\n//   coming after this one.\n//\n//   toJSON:: ?(value: T) → *\n//   Convert this field to JSON. Optional, can be left off to disable\n//   JSON serialization for the field.\n//\n//   fromJSON:: ?(config: Object, value: *, state: EditorState) → T\n//   Deserialize the JSON representation of this field. Note that the\n//   `state` argument is again a half-initialized state.\n\nconst keys = Object.create(null)\n\nfunction createKey(name) {\n  if (name in keys) return name + \"$\" + ++keys[name]\n  keys[name] = 0\n  return name + \"$\"\n}\n\n// ::- A key is used to [tag](#state.PluginSpec.key)\n// plugins in a way that makes it possible to find them, given an\n// editor state. Assigning a key does mean only one plugin of that\n// type can be active in a state.\nexport class PluginKey {\n  // :: (?string)\n  // Create a plugin key.\n  constructor(name = \"key\") { this.key = createKey(name) }\n\n  // :: (EditorState) → ?Plugin\n  // Get the active plugin with this key, if any, from an editor\n  // state.\n  get(state) { return state.config.pluginsByKey[this.key] }\n\n  // :: (EditorState) → ?any\n  // Get the plugin's state from an editor state.\n  getState(state) { return state[this.key] }\n}\n","import { Extension } from '@tiptap/core'\nimport { Plugin, PluginKey } from 'prosemirror-state'\n\nexport const pluginKey = new PluginKey('characterLimit')\n\nexport interface CharacterCountOptions {\n  limit?: number,\n}\n\nexport const CharacterCount = Extension.create<CharacterCountOptions>({\n  name: 'characterCount',\n\n  defaultOptions: {\n    limit: 0,\n  },\n\n  addProseMirrorPlugins() {\n    const { options } = this\n\n    return [\n      new Plugin({\n\n        key: pluginKey,\n\n        appendTransaction: (transactions, oldState, newState) => {\n          const length = newState.doc.content.size\n\n          if (options.limit && length > options.limit) {\n            return newState.tr.insertText('', options.limit + 1, length)\n          }\n        },\n      }),\n    ]\n  },\n})\n"],"names":["let","prototypeAccessors","const","p","n","prototypeAccessors$1","super","i","type","loop","next","states","this","rules","name","space","slice","d","splitting","index","found","match","Extension"],"mappings":"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"}