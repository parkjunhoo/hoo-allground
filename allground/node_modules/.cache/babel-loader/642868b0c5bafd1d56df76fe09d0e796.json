{"remainingRequest":"C:\\Users\\lol\\Desktop\\server\\allground\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\lol\\Desktop\\server\\allground\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\lol\\Desktop\\server\\allground\\node_modules\\vuetify\\lib\\services\\lang\\index.js","dependencies":[{"path":"C:\\Users\\lol\\Desktop\\server\\allground\\node_modules\\vuetify\\lib\\services\\lang\\index.js","mtime":1619014118507},{"path":"C:\\Users\\lol\\Desktop\\server\\allground\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617667255123},{"path":"C:\\Users\\lol\\Desktop\\server\\allground\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1617667255123},{"path":"C:\\Users\\lol\\Desktop\\server\\allground\\node_modules\\babel-loader\\lib\\index.js","mtime":1617667255120}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuTGFuZyA9IHZvaWQgMDsKCnZhciBfc2VydmljZSA9IHJlcXVpcmUoIi4uL3NlcnZpY2UiKTsKCnZhciBfaGVscGVycyA9IHJlcXVpcmUoIi4uLy4uL3V0aWwvaGVscGVycyIpOwoKdmFyIF9jb25zb2xlID0gcmVxdWlyZSgiLi4vLi4vdXRpbC9jb25zb2xlIik7CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgTEFOR19QUkVGSVggPSAnJHZ1ZXRpZnkuJzsKdmFyIGZhbGxiYWNrID0gU3ltYm9sKCdMYW5nIGZhbGxiYWNrJyk7CgpmdW5jdGlvbiBnZXRUcmFuc2xhdGlvbihsb2NhbGUsIGtleSkgewogIHZhciB1c2luZ0RlZmF1bHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlOwogIHZhciBkZWZhdWx0TG9jYWxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7CiAgdmFyIHNob3J0S2V5ID0ga2V5LnJlcGxhY2UoTEFOR19QUkVGSVgsICcnKTsKICB2YXIgdHJhbnNsYXRpb24gPSAoMCwgX2hlbHBlcnMuZ2V0T2JqZWN0VmFsdWVCeVBhdGgpKGxvY2FsZSwgc2hvcnRLZXksIGZhbGxiYWNrKTsKCiAgaWYgKHRyYW5zbGF0aW9uID09PSBmYWxsYmFjaykgewogICAgaWYgKHVzaW5nRGVmYXVsdCkgewogICAgICAoMCwgX2NvbnNvbGUuY29uc29sZUVycm9yKSgiVHJhbnNsYXRpb24ga2V5IFwiIi5jb25jYXQoc2hvcnRLZXksICJcIiBub3QgZm91bmQgaW4gZmFsbGJhY2siKSk7CiAgICAgIHRyYW5zbGF0aW9uID0ga2V5OwogICAgfSBlbHNlIHsKICAgICAgKDAsIF9jb25zb2xlLmNvbnNvbGVXYXJuKSgiVHJhbnNsYXRpb24ga2V5IFwiIi5jb25jYXQoc2hvcnRLZXksICJcIiBub3QgZm91bmQsIGZhbGxpbmcgYmFjayB0byBkZWZhdWx0IikpOwogICAgICB0cmFuc2xhdGlvbiA9IGdldFRyYW5zbGF0aW9uKGRlZmF1bHRMb2NhbGUsIGtleSwgdHJ1ZSwgZGVmYXVsdExvY2FsZSk7CiAgICB9CiAgfQoKICByZXR1cm4gdHJhbnNsYXRpb247Cn0KCnZhciBMYW5nID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU2VydmljZSkgewogIF9pbmhlcml0cyhMYW5nLCBfU2VydmljZSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTGFuZyk7CgogIGZ1bmN0aW9uIExhbmcocHJlc2V0KSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExhbmcpOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5kZWZhdWx0TG9jYWxlID0gJ2VuJzsKICAgIHZhciBfcHJlc2V0JExhbmckcHJvcGVydHkgPSBwcmVzZXRbTGFuZy5wcm9wZXJ0eV0sCiAgICAgICAgY3VycmVudCA9IF9wcmVzZXQkTGFuZyRwcm9wZXJ0eS5jdXJyZW50LAogICAgICAgIGxvY2FsZXMgPSBfcHJlc2V0JExhbmckcHJvcGVydHkubG9jYWxlcywKICAgICAgICB0ID0gX3ByZXNldCRMYW5nJHByb3BlcnR5LnQ7CiAgICBfdGhpcy5jdXJyZW50ID0gY3VycmVudDsKICAgIF90aGlzLmxvY2FsZXMgPSBsb2NhbGVzOwogICAgX3RoaXMudHJhbnNsYXRvciA9IHQgfHwgX3RoaXMuZGVmYXVsdFRyYW5zbGF0b3I7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoTGFuZywgW3sKICAgIGtleTogImN1cnJlbnRMb2NhbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGN1cnJlbnRMb2NhbGUoa2V5KSB7CiAgICAgIHZhciB0cmFuc2xhdGlvbiA9IHRoaXMubG9jYWxlc1t0aGlzLmN1cnJlbnRdOwogICAgICB2YXIgZGVmYXVsdExvY2FsZSA9IHRoaXMubG9jYWxlc1t0aGlzLmRlZmF1bHRMb2NhbGVdOwogICAgICByZXR1cm4gZ2V0VHJhbnNsYXRpb24odHJhbnNsYXRpb24sIGtleSwgZmFsc2UsIGRlZmF1bHRMb2NhbGUpOwogICAgfQogIH0sIHsKICAgIGtleTogInQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHQoa2V5KSB7CiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwYXJhbXMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICAgIHBhcmFtc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07CiAgICAgIH0KCiAgICAgIGlmICgha2V5LnN0YXJ0c1dpdGgoTEFOR19QUkVGSVgpKSByZXR1cm4gdGhpcy5yZXBsYWNlKGtleSwgcGFyYW1zKTsKICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRvci5hcHBseSh0aGlzLCBba2V5XS5jb25jYXQocGFyYW1zKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGVmYXVsdFRyYW5zbGF0b3IiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlZmF1bHRUcmFuc2xhdG9yKGtleSkgewogICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBhcmFtcyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7CiAgICAgICAgcGFyYW1zW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKHRoaXMuY3VycmVudExvY2FsZShrZXkpLCBwYXJhbXMpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlcGxhY2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2Uoc3RyLCBwYXJhbXMpIHsKICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9ceyhcZCspXH0vZywgZnVuY3Rpb24gKG1hdGNoLCBpbmRleCkgewogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgICAgICAgcmV0dXJuIFN0cmluZyhwYXJhbXNbK2luZGV4XSk7CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIExhbmc7Cn0oX3NlcnZpY2UuU2VydmljZSk7CgpleHBvcnRzLkxhbmcgPSBMYW5nOwpMYW5nLnByb3BlcnR5ID0gJ2xhbmcnOw=="},{"version":3,"sources":["../../../src/services/lang/index.ts"],"names":[],"mappings":";;;;;;;;;AACA;;AAGA;;AACA;;;;;;;;;;;;;;;;;;;;;;AASA,IAAM,WAAW,GAAjB,WAAA;AACA,IAAM,QAAQ,GAAG,MAAM,CAAvB,eAAuB,CAAvB;;AAEA,SAAA,cAAA,CAAA,MAAA,EAAA,GAAA,EAI8B;AAAA,MAD5B,YAC4B,uEAJ9B,KAI8B;AAAA,MAJ9B,aAI8B;AAE5B,MAAM,QAAQ,GAAG,GAAG,CAAH,OAAA,CAAA,WAAA,EAAjB,EAAiB,CAAjB;AACA,MAAI,WAAW,GAAG,mCAAoB,MAApB,EAAoB,QAApB,EAAlB,QAAkB,CAAlB;;AAEA,MAAI,WAAW,KAAf,QAAA,EAA8B;AAC5B,QAAA,YAAA,EAAkB;AAChB,6DAAA,QAAA;AACA,MAAA,WAAW,GAAX,GAAA;AAFF,KAAA,MAGO;AACL,4DAAA,QAAA;AACA,MAAA,WAAW,GAAG,cAAc,CAAA,aAAA,EAAA,GAAA,EAAA,IAAA,EAA5B,aAA4B,CAA5B;AACD;AACF;;AAED,SAAA,WAAA;AACD;;IAEK,I;;;;;AAWJ,gBAAA,MAAA,EAAkC;AAAA;;AAAA;;AAChC;AAPK,UAAA,aAAA,GAAA,IAAA;AASL,gCAII,MAAM,CAAC,IAAI,CAJf,QAIU,CAJV;AAAA,QAAM,OAAN,yBAAM,OAAN;AAAA,QAAM,OAAN,yBAAM,OAAN;AAAA,QAGE,CAHF,yBAGE,CAHF;AAMA,UAAA,OAAA,GAAA,OAAA;AACA,UAAA,OAAA,GAAA,OAAA;AACA,UAAA,UAAA,GAAkB,CAAC,IAAI,MAAvB,iBAAA;AAXgC;AAYjC;;;;WAEM,uBAAa,GAAb,EAA0B;AAC/B,UAAM,WAAW,GAAG,KAAA,OAAA,CAAa,KAAjC,OAAoB,CAApB;AACA,UAAM,aAAa,GAAG,KAAA,OAAA,CAAa,KAAnC,aAAsB,CAAtB;AAEA,aAAO,cAAc,CAAA,WAAA,EAAA,GAAA,EAAA,KAAA,EAArB,aAAqB,CAArB;AACD;;;WAEM,WAAC,GAAD,EAAgC;AAAA,wCAA/B,MAA+B;AAA/B,QAAA,MAA+B;AAAA;;AACrC,UAAI,CAAC,GAAG,CAAH,UAAA,CAAL,WAAK,CAAL,EAAkC,OAAO,KAAA,OAAA,CAAA,GAAA,EAAP,MAAO,CAAP;AAElC,aAAO,KAAA,UAAA,cAAA,GAAA,SAAP,MAAO,EAAP;AACD;;;WAEO,2BAAiB,GAAjB,EAAgD;AAAA,yCAA/B,MAA+B;AAA/B,QAAA,MAA+B;AAAA;;AACtD,aAAO,KAAA,OAAA,CAAa,KAAA,aAAA,CAAb,GAAa,CAAb,EAAP,MAAO,CAAP;AACD;;;WAEO,iBAAO,GAAP,EAAO,MAAP,EAAmC;AACzC,aAAO,GAAG,CAAH,OAAA,CAAA,YAAA,EAA0B,UAAA,KAAA,EAAA,KAAA,EAAiC;AAChE;AACA,eAAO,MAAM,CAAC,MAAM,CAAC,CAArB,KAAoB,CAAP,CAAb;AAFF,OAAO,CAAP;AAID;;;;EA/CG,gB;;;AACG,IAAA,CAAA,QAAA,GAAA,MAAA","sourcesContent":["// Extensions\nimport { Service } from '../service'\n\n// Utilities\nimport { getObjectValueByPath } from '../../util/helpers'\nimport { consoleError, consoleWarn } from '../../util/console'\n\n// Types\nimport { VuetifyPreset } from 'vuetify/types/services/presets'\nimport {\n  VuetifyLocale,\n  Lang as ILang,\n} from 'vuetify/types/services/lang'\n\nconst LANG_PREFIX = '$vuetify.'\nconst fallback = Symbol('Lang fallback')\n\nfunction getTranslation (\n  locale: VuetifyLocale,\n  key: string,\n  usingDefault = false,\n  defaultLocale: VuetifyLocale\n): string {\n  const shortKey = key.replace(LANG_PREFIX, '')\n  let translation = getObjectValueByPath(locale, shortKey, fallback) as string | typeof fallback\n\n  if (translation === fallback) {\n    if (usingDefault) {\n      consoleError(`Translation key \"${shortKey}\" not found in fallback`)\n      translation = key\n    } else {\n      consoleWarn(`Translation key \"${shortKey}\" not found, falling back to default`)\n      translation = getTranslation(defaultLocale, key, true, defaultLocale)\n    }\n  }\n\n  return translation\n}\n\nexport class Lang extends Service implements ILang {\n  static property: 'lang' = 'lang'\n\n  public current: ILang['current']\n\n  public defaultLocale = 'en'\n\n  public locales: ILang['locales']\n\n  private translator: ILang['t']\n\n  constructor (preset: VuetifyPreset) {\n    super()\n\n    const {\n      current,\n      locales,\n      t,\n    } = preset[Lang.property]\n\n    this.current = current\n    this.locales = locales\n    this.translator = t || this.defaultTranslator\n  }\n\n  public currentLocale (key: string) {\n    const translation = this.locales[this.current]\n    const defaultLocale = this.locales[this.defaultLocale]\n\n    return getTranslation(translation, key, false, defaultLocale)\n  }\n\n  public t (key: string, ...params: any[]) {\n    if (!key.startsWith(LANG_PREFIX)) return this.replace(key, params)\n\n    return this.translator(key, ...params)\n  }\n\n  private defaultTranslator (key: string, ...params: any[]) {\n    return this.replace(this.currentLocale(key), params)\n  }\n\n  private replace (str: string, params: any[]) {\n    return str.replace(/\\{(\\d+)\\}/g, (match: string, index: string) => {\n      /* istanbul ignore next */\n      return String(params[+index])\n    })\n  }\n}\n"],"sourceRoot":""}]}